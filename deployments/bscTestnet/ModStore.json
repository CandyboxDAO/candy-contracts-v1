{
  "address": "0xE3672BADde62F4D3F5fef89A72a008fd1FC9cC10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IModAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "indexed": false,
          "internalType": "struct PayoutMod",
          "name": "mods",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetPayoutMod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct TicketMod",
          "name": "mods",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetTicketMod",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        }
      ],
      "name": "payoutModsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IModAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct PayoutMod[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "contract IModAllocator",
              "name": "allocator",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "projectId",
              "type": "uint56"
            }
          ],
          "internalType": "struct PayoutMod[]",
          "name": "_mods",
          "type": "tuple[]"
        }
      ],
      "name": "setPayoutMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct TicketMod[]",
          "name": "_mods",
          "type": "tuple[]"
        }
      ],
      "name": "setTicketMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        }
      ],
      "name": "ticketModsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferUnstaked",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "lockedUntil",
              "type": "uint48"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct TicketMod[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x858002358a053c088f6d332df7eea02ce2be018cbc2f1f43334e78f8e57698c3",
  "receipt": {
    "to": null,
    "from": "0xB29b99fF4C471497F884C44C42a690CAacaC12f3",
    "contractAddress": "0xE3672BADde62F4D3F5fef89A72a008fd1FC9cC10",
    "transactionIndex": 8,
    "gasUsed": "1831123",
    "logsBloom": "0x
    "blockHash": "0xc6a6850928ca167a6340a99f303fd8a271a2a9836f541fb7b564ef78abb828ba",
    "transactionHash": "0x858002358a053c088f6d332df7eea02ce2be018cbc2f1f43334e78f8e57698c3",
    "logs": [],
    "blockNumber": 16884825,
    "cumulativeGasUsed": "4680140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B86C96Db65fd2F1140Dd9B3A720207E2334Ce31",
    "0xa39F7F08860B6B47232B2B9706b2E9e46f6d29bf",
    "0xF3eb8F354DCf96b6514313e7750Ded0746a5b71c"
  ],
  "solcInputHash": "ccb7a7bd8fb2979a6e849901853bc8b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct PayoutMod\",\"name\":\"mods\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetPayoutMod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct TicketMod\",\"name\":\"mods\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetTicketMod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"}],\"name\":\"payoutModsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"_mods\",\"type\":\"tuple[]\"}],\"name\":\"setPayoutMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct TicketMod[]\",\"name\":\"_mods\",\"type\":\"tuple[]\"}],\"name\":\"setTicketMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"}],\"name\":\"ticketModsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct TicketMod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mods can be used to distribute a percentage of payments or tickets to preconfigured beneficiaries.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"The contract storing project information\",\"_terminalDirectory\":\"A directory of a project's current Candybox terminal to receive payments in.\"}},\"payoutModsOf(uint256,uint256)\":{\"params\":{\"_configuration\":\"The configuration to get mods for.\",\"_projectId\":\"The ID of the project to get mods for.\"},\"returns\":{\"_0\":\"An array of all mods for the project.\"}},\"setPayoutMods(uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])\":{\"details\":\"Only the owner or operator of a project can make this call, or the current terminal of the project.\",\"params\":{\"_configuration\":\"The configuration to set the mods to be active during.\",\"_mods\":\"The payout mods to set.\",\"_projectId\":\"The project to add a mod to.\"}},\"setTicketMods(uint256,uint256,(bool,uint16,uint48,address)[])\":{\"details\":\"Only the owner or operator of a project can make this call, or the current terminal of the project.\",\"params\":{\"_configuration\":\"The configuration to set the mods to be active during.\",\"_mods\":\"The ticket mods to set.\",\"_projectId\":\"The project to add a mod to.\"}},\"ticketModsOf(uint256,uint256)\":{\"params\":{\"_configuration\":\"The configuration to get mods for.\",\"_projectId\":\"The ID of the project to get mods for.\"},\"returns\":{\"_0\":\"An array of all mods for the project.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"payoutModsOf(uint256,uint256)\":{\"notice\":\" Get all payout mods for the specified project ID.\"},\"projects()\":{\"notice\":\"The contract storing project information.\"},\"setPayoutMods(uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])\":{\"notice\":\" Adds a mod to the payout mods list.\"},\"setTicketMods(uint256,uint256,(bool,uint16,uint48,address)[])\":{\"notice\":\" Adds a mod to the ticket mods list.\"},\"terminalDirectory()\":{\"notice\":\"The direct deposit terminals.\"},\"ticketModsOf(uint256,uint256)\":{\"notice\":\" Get all ticket mods for the specified project ID.\"}},\"notice\":\"Stores mods for each project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ModStore.sol\":\"ModStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./interfaces/IModStore.sol\\\";\\r\\nimport \\\"./abstract/Operatable.sol\\\";\\r\\nimport \\\"./abstract/TerminalUtility.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/Operations.sol\\\";\\r\\n\\r\\n/**\\r\\n  @notice\\r\\n  Stores mods for each project.\\r\\n\\r\\n  @dev\\r\\n  Mods can be used to distribute a percentage of payments or tickets to preconfigured beneficiaries.\\r\\n*/\\r\\ncontract ModStore is IModStore, Operatable, TerminalUtility {\\r\\n    // --- private stored properties --- //\\r\\n\\r\\n    // All payout mods for each project ID's configurations.\\r\\n    mapping(uint256 => mapping(uint256 => PayoutMod[])) private _payoutModsOf;\\r\\n\\r\\n    // All ticket mods for each project ID's configurations.\\r\\n    mapping(uint256 => mapping(uint256 => TicketMod[])) private _ticketModsOf;\\r\\n\\r\\n    // --- public immutable stored properties --- //\\r\\n\\r\\n    /// @notice The contract storing project information.\\r\\n    IProjects public immutable override projects;\\r\\n\\r\\n    // --- public views --- //\\r\\n\\r\\n    /**\\r\\n      @notice \\r\\n      Get all payout mods for the specified project ID.\\r\\n\\r\\n      @param _projectId The ID of the project to get mods for.\\r\\n      @param _configuration The configuration to get mods for.\\r\\n\\r\\n      @return An array of all mods for the project.\\r\\n     */\\r\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (PayoutMod[] memory)\\r\\n    {\\r\\n        return _payoutModsOf[_projectId][_configuration];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      @notice \\r\\n      Get all ticket mods for the specified project ID.\\r\\n\\r\\n      @param _projectId The ID of the project to get mods for.\\r\\n      @param _configuration The configuration to get mods for.\\r\\n\\r\\n      @return An array of all mods for the project.\\r\\n     */\\r\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (TicketMod[] memory)\\r\\n    {\\r\\n        return _ticketModsOf[_projectId][_configuration];\\r\\n    }\\r\\n\\r\\n    // --- external transactions --- //\\r\\n\\r\\n    /** \\r\\n      @param _projects The contract storing project information\\r\\n      @param _operatorStore A contract storing operator assignments.\\r\\n      @param _terminalDirectory A directory of a project's current Candybox terminal to receive payments in.\\r\\n    */\\r\\n    constructor(\\r\\n        IProjects _projects,\\r\\n        IOperatorStore _operatorStore,\\r\\n        ITerminalDirectory _terminalDirectory\\r\\n    ) Operatable(_operatorStore) TerminalUtility(_terminalDirectory) {\\r\\n        projects = _projects;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice \\r\\n      Adds a mod to the payout mods list.\\r\\n\\r\\n      @dev\\r\\n      Only the owner or operator of a project can make this call, or the current terminal of the project.\\r\\n\\r\\n      @param _projectId The project to add a mod to.\\r\\n      @param _configuration The configuration to set the mods to be active during.\\r\\n      @param _mods The payout mods to set.\\r\\n    */\\r\\n    function setPayoutMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        PayoutMod[] memory _mods\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        requirePermissionAcceptingAlternateAddress(\\r\\n            projects.ownerOf(_projectId),\\r\\n            _projectId,\\r\\n            Operations.SetPayoutMods,\\r\\n            address(terminalDirectory.terminalOf(_projectId))\\r\\n        )\\r\\n    {\\r\\n        // There must be something to do.\\r\\n        require(_mods.length > 0, \\\"ModStore::setPayoutMods: NO_OP\\\");\\r\\n\\r\\n        // Get a reference to the project's payout mods.\\r\\n        PayoutMod[] memory _currentMods = _payoutModsOf[_projectId][\\r\\n            _configuration\\r\\n        ];\\r\\n\\r\\n        // Check to see if all locked Mods are included.\\r\\n        for (uint256 _i = 0; _i < _currentMods.length; _i++) {\\r\\n            if (block.timestamp < _currentMods[_i].lockedUntil) {\\r\\n                bool _includesLocked = false;\\r\\n                for (uint256 _j = 0; _j < _mods.length; _j++) {\\r\\n                    // Check for sameness. Let the note change.\\r\\n                    if (\\r\\n                        _mods[_j].percent == _currentMods[_i].percent &&\\r\\n                        _mods[_j].beneficiary == _currentMods[_i].beneficiary &&\\r\\n                        _mods[_j].allocator == _currentMods[_i].allocator &&\\r\\n                        _mods[_j].projectId == _currentMods[_i].projectId &&\\r\\n                        // Allow lock expention.\\r\\n                        _mods[_j].lockedUntil >= _currentMods[_i].lockedUntil\\r\\n                    ) _includesLocked = true;\\r\\n                }\\r\\n                require(\\r\\n                    _includesLocked,\\r\\n                    \\\"ModStore::setPayoutMods: SOME_LOCKED\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Delete from storage so mods can be repopulated.\\r\\n        delete _payoutModsOf[_projectId][_configuration];\\r\\n\\r\\n        // Add up all the percents to make sure they cumulative are under 100%.\\r\\n        uint256 _payoutModPercentTotal = 0;\\r\\n\\r\\n        for (uint256 _i = 0; _i < _mods.length; _i++) {\\r\\n            // The percent should be greater than 0.\\r\\n            require(\\r\\n                _mods[_i].percent > 0,\\r\\n                \\\"ModStore::setPayoutMods: BAD_MOD_PERCENT\\\"\\r\\n            );\\r\\n\\r\\n            // Add to the total percents.\\r\\n            _payoutModPercentTotal = _payoutModPercentTotal + _mods[_i].percent;\\r\\n\\r\\n            // The total percent should be less than 10000.\\r\\n            require(\\r\\n                _payoutModPercentTotal <= 10000,\\r\\n                \\\"ModStore::setPayoutMods: BAD_TOTAL_PERCENT\\\"\\r\\n            );\\r\\n\\r\\n            // The allocator and the beneficiary shouldn't both be the zero address.\\r\\n            require(\\r\\n                _mods[_i].allocator != IModAllocator(address(0)) ||\\r\\n                    _mods[_i].beneficiary != address(0),\\r\\n                \\\"ModStore::setPayoutMods: ZERO_ADDRESS\\\"\\r\\n            );\\r\\n\\r\\n            // Push the new mod into the project's list of mods.\\r\\n            _payoutModsOf[_projectId][_configuration].push(_mods[_i]);\\r\\n\\r\\n            emit SetPayoutMod(\\r\\n                _projectId,\\r\\n                _configuration,\\r\\n                _mods[_i],\\r\\n                msg.sender\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice \\r\\n      Adds a mod to the ticket mods list.\\r\\n\\r\\n      @dev\\r\\n      Only the owner or operator of a project can make this call, or the current terminal of the project.\\r\\n\\r\\n      @param _projectId The project to add a mod to.\\r\\n      @param _configuration The configuration to set the mods to be active during.\\r\\n      @param _mods The ticket mods to set.\\r\\n    */\\r\\n    function setTicketMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        TicketMod[] memory _mods\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        requirePermissionAcceptingAlternateAddress(\\r\\n            projects.ownerOf(_projectId),\\r\\n            _projectId,\\r\\n            Operations.SetTicketMods,\\r\\n            address(terminalDirectory.terminalOf(_projectId))\\r\\n        )\\r\\n    {\\r\\n        // There must be something to do.\\r\\n        require(_mods.length > 0, \\\"ModStore::setTicketMods: NO_OP\\\");\\r\\n\\r\\n        // Get a reference to the project's ticket mods.\\r\\n        TicketMod[] memory _projectTicketMods = _ticketModsOf[_projectId][\\r\\n            _configuration\\r\\n        ];\\r\\n\\r\\n        // Check to see if all locked Mods are included.\\r\\n        for (uint256 _i = 0; _i < _projectTicketMods.length; _i++) {\\r\\n            if (block.timestamp < _projectTicketMods[_i].lockedUntil) {\\r\\n                bool _includesLocked = false;\\r\\n                for (uint256 _j = 0; _j < _mods.length; _j++) {\\r\\n                    // Check for the same values.\\r\\n                    if (\\r\\n                        _mods[_j].percent == _projectTicketMods[_i].percent &&\\r\\n                        _mods[_j].beneficiary ==\\r\\n                        _projectTicketMods[_i].beneficiary &&\\r\\n                        // Allow lock extensions.\\r\\n                        _mods[_j].lockedUntil >=\\r\\n                        _projectTicketMods[_i].lockedUntil\\r\\n                    ) _includesLocked = true;\\r\\n                }\\r\\n                require(\\r\\n                    _includesLocked,\\r\\n                    \\\"ModStore::setTicketMods: SOME_LOCKED\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        // Delete from storage so mods can be repopulated.\\r\\n        delete _ticketModsOf[_projectId][_configuration];\\r\\n\\r\\n        // Add up all the percents to make sure they cumulative are under 100%.\\r\\n        uint256 _ticketModPercentTotal = 0;\\r\\n\\r\\n        for (uint256 _i = 0; _i < _mods.length; _i++) {\\r\\n            // The percent should be greater than 0.\\r\\n            require(\\r\\n                _mods[_i].percent > 0,\\r\\n                \\\"ModStore::setTicketMods: BAD_MOD_PERCENT\\\"\\r\\n            );\\r\\n\\r\\n            // Add to the total percents.\\r\\n            _ticketModPercentTotal = _ticketModPercentTotal + _mods[_i].percent;\\r\\n            // The total percent should be less than 10000.\\r\\n            require(\\r\\n                _ticketModPercentTotal <= 10000,\\r\\n                \\\"ModStore::setTicketMods: BAD_TOTAL_PERCENT\\\"\\r\\n            );\\r\\n\\r\\n            // The beneficiary shouldn't be the zero address.\\r\\n            require(\\r\\n                _mods[_i].beneficiary != address(0),\\r\\n                \\\"ModStore::setTicketMods: ZERO_ADDRESS\\\"\\r\\n            );\\r\\n\\r\\n            // Push the new mod into the project's list of mods.\\r\\n            _ticketModsOf[_projectId][_configuration].push(_mods[_i]);\\r\\n\\r\\n            emit SetTicketMod(\\r\\n                _projectId,\\r\\n                _configuration,\\r\\n                _mods[_i],\\r\\n                msg.sender\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe181297de275dd4aacd6e7246ec197c14c295adea8745272bf49d85171df96b8\",\"license\":\"MIT\"},\"contracts/abstract/Operatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./../interfaces/IOperatable.sol\\\";\\r\\n\\r\\nabstract contract Operatable is IOperatable {\\r\\n    modifier requirePermission(\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _index\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == _account ||\\r\\n                operatorStore.hasPermission(\\r\\n                    msg.sender,\\r\\n                    _account,\\r\\n                    _domain,\\r\\n                    _index\\r\\n                ),\\r\\n            \\\"Operatable: UNAUTHORIZED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requirePermissionAllowingWildcardDomain(\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _index\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == _account ||\\r\\n                operatorStore.hasPermission(\\r\\n                    msg.sender,\\r\\n                    _account,\\r\\n                    _domain,\\r\\n                    _index\\r\\n                ) ||\\r\\n                operatorStore.hasPermission(msg.sender, _account, 0, _index),\\r\\n            \\\"Operatable: UNAUTHORIZED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requirePermissionAcceptingAlternateAddress(\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _index,\\r\\n        address _alternate\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == _account ||\\r\\n                operatorStore.hasPermission(\\r\\n                    msg.sender,\\r\\n                    _account,\\r\\n                    _domain,\\r\\n                    _index\\r\\n                ) ||\\r\\n                msg.sender == _alternate,\\r\\n            \\\"Operatable: UNAUTHORIZED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice A contract storing operator assignments.\\r\\n    IOperatorStore public immutable override operatorStore;\\r\\n\\r\\n    /** \\r\\n      @param _operatorStore A contract storing operator assignments.\\r\\n    */\\r\\n    constructor(IOperatorStore _operatorStore) {\\r\\n        operatorStore = _operatorStore;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x06cddb0970308c736fb56ba5a01e38116bbce8313976ae73656a2fa3cb6bec38\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./../interfaces/ITerminalUtility.sol\\\";\\r\\n\\r\\nabstract contract TerminalUtility is ITerminalUtility {\\r\\n    modifier onlyTerminal(uint256 _projectId) {\\r\\n        require(\\r\\n            address(terminalDirectory.terminalOf(_projectId)) == msg.sender,\\r\\n            \\\"TerminalUtility: UNAUTHORIZED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice The direct deposit terminals.\\r\\n    ITerminalDirectory public immutable override terminalDirectory;\\r\\n\\r\\n    /** \\r\\n      @param _terminalDirectory A directory of a project's current Candybox terminal to receive payments in.\\r\\n    */\\r\\n    constructor(ITerminalDirectory _terminalDirectory) {\\r\\n        terminalDirectory = _terminalDirectory;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x20550604bdda05cd19ba83e1be4dae1f9d7c3ab96e5828564c94e226a9f0236b\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\n\\r\\ninterface IDirectPaymentAddress {\\r\\n    event Forward(\\r\\n        address indexed payer,\\r\\n        uint256 indexed projectId,\\r\\n        address beneficiary,\\r\\n        uint256 value,\\r\\n        string memo,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd06e33fc4ee499a075753fef5254d67e2c5b34a1f59383aff3d39542493076ce\",\"license\":\"MIT\"},\"contracts/interfaces/IModAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IModAllocator {\\r\\n    event Allocate(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed forProjectId,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function allocate(\\r\\n        uint256 _projectId,\\r\\n        uint256 _forProjectId,\\r\\n        address _beneficiary\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xc1eb226ba764a20efe62a2648fe6665cee3c5f89c74e47b0ac2c412184e92ada\",\"license\":\"MIT\"},\"contracts/interfaces/IModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IModAllocator.sol\\\";\\r\\n\\r\\nstruct PayoutMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n    IModAllocator allocator;\\r\\n    uint56 projectId;\\r\\n}\\r\\n\\r\\nstruct TicketMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n}\\r\\n\\r\\ninterface IModStore {\\r\\n    event SetPayoutMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        PayoutMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetTicketMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        TicketMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (PayoutMod[] memory);\\r\\n\\r\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (TicketMod[] memory);\\r\\n\\r\\n    function setPayoutMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        PayoutMod[] memory _mods\\r\\n    ) external;\\r\\n\\r\\n    function setTicketMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        TicketMod[] memory _mods\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x32030d8e78b72a8a1d4744bf362e7f5268f90f169c41519ef74292f18f02d97b\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IOperatable {\\r\\n    function operatorStore() external view returns (IOperatorStore);\\r\\n}\\r\\n\",\"keccak256\":\"0x138ba6b9d0ec81636b5d9ec2309c985970b0cb156eec99cc59bb8bfa1e329aee\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOperatorStore {\\r\\n    event SetOperator(\\r\\n        address indexed operator,\\r\\n        address indexed account,\\r\\n        uint256 indexed domain,\\r\\n        uint256[] permissionIndexes,\\r\\n        uint256 packed\\r\\n    );\\r\\n\\r\\n    function permissionsOf(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function hasPermission(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _permissionIndex\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function hasPermissions(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setOperator(\\r\\n        address _operator,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external;\\r\\n\\r\\n    function setOperators(\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _domains,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf36c573b8146fcb6819a957dfc581ba906ccd5e109dfb1e2a8bc686efc2407fa\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IProjects is IERC721 {\\r\\n    event Create(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed owner,\\r\\n        bytes32 indexed handle,\\r\\n        string uri,\\r\\n        ITerminal terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetHandle(\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\r\\n\\r\\n    event TransferHandle(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed to,\\r\\n        bytes32 indexed handle,\\r\\n        bytes32 newHandle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ClaimHandle(\\r\\n        address indexed account,\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ChallengeHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 challengeExpiry,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event RenewHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 indexed projectId,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\r\\n\\r\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\r\\n\\r\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\r\\n\\r\\n    function transferAddressFor(bytes32 _handle)\\r\\n        external\\r\\n        returns (address receiver);\\r\\n\\r\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\r\\n\\r\\n    function exists(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n    function create(\\r\\n        address _owner,\\r\\n        bytes32 _handle,\\r\\n        string calldata _uri,\\r\\n        ITerminal _terminal\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\r\\n\\r\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\r\\n\\r\\n    function transferHandle(\\r\\n        uint256 _projectId,\\r\\n        address _to,\\r\\n        bytes32 _newHandle\\r\\n    ) external returns (bytes32 _handle);\\r\\n\\r\\n    function claimHandle(\\r\\n        bytes32 _handle,\\r\\n        address _for,\\r\\n        uint256 _projectId\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62f6370a1ee64fb5642159b7049715a59404815de69a26dcfe60e0b40e30ff01\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport './ITerminalDirectory.sol';\\r\\n\\r\\ninterface ITerminal {\\r\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n\\r\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\r\\n\\r\\n  function pay(\\r\\n    uint256 _projectId,\\r\\n    address _beneficiary,\\r\\n    string calldata _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external payable returns (uint256 fundingCycleId);\\r\\n\\r\\n  function addToBalance(uint256 _projectId) external payable;\\r\\n\\r\\n  function allowMigration(ITerminal _contract) external;\\r\\n\\r\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3936e4ecc9600ca75b996fbc19674f1c2997be5899e77ae9ef240b410a9cb647\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\n\\r\\ninterface ITerminalDirectory {\\r\\n    event DeployAddress(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SetTerminal(\\r\\n        uint256 indexed projectId,\\r\\n        ITerminal indexed terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetPayerPreferences(\\r\\n        address indexed account,\\r\\n        address beneficiary,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\r\\n\\r\\n    function beneficiaryOf(address _account) external returns (address);\\r\\n\\r\\n    function unstakedTicketsPreferenceOf(address _account)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IDirectPaymentAddress[] memory);\\r\\n\\r\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\r\\n\\r\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\r\\n\\r\\n    function setPayerPreferences(\\r\\n        address _beneficiary,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf51c6dfb9b0236446e35701283ffb1c3508546ef9bf0e48933ea52f6b359c68\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\n\\r\\ninterface ITerminalUtility {\\r\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5b4373f06d534bacb6d710f863935f4c33f95b1d5b1eef11c21a0c06e2610bf0\",\"license\":\"MIT\"},\"contracts/libraries/Operations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nlibrary Operations {\\r\\n  uint256 public constant Configure = 1;\\r\\n  uint256 public constant PrintPreminedTickets = 2;\\r\\n  uint256 public constant Redeem = 3;\\r\\n  uint256 public constant Migrate = 4;\\r\\n  uint256 public constant SetHandle = 5;\\r\\n  uint256 public constant SetUri = 6;\\r\\n  uint256 public constant ClaimHandle = 7;\\r\\n  uint256 public constant RenewHandle = 8;\\r\\n  uint256 public constant Issue = 9;\\r\\n  uint256 public constant Stake = 10;\\r\\n  uint256 public constant Unstake = 11;\\r\\n  uint256 public constant Transfer = 12;\\r\\n  uint256 public constant Lock = 13;\\r\\n  uint256 public constant SetPayoutMods = 14;\\r\\n  uint256 public constant SetTicketMods = 15;\\r\\n  uint256 public constant SetTerminal = 16;\\r\\n  uint256 public constant PrintTickets = 17;\\r\\n}\\r\\n\",\"keccak256\":\"0xea1843e157d2ba34cdeed4cf0eeac364966c3fe9fb5570f55137a57decef0199\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620021733803806200217383398101604081905262000034916200005c565b6001600160601b0319606092831b811660805290821b811660a05291901b1660c052620000c9565b6000806000606084860312156200007257600080fd5b83516200007f81620000b0565b60208501519093506200009281620000b0565b6040850151909250620000a581620000b0565b809150509250925092565b6001600160a01b0381168114620000c657600080fd5b50565b60805160601c60a05160601c60c05160601c6120486200012b6000396000818161011c015281816103710152610ef101526000818160b0015281816104490152610fc90152600081816101580152818161053b01526110bb01526120486000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638b79543c1161005b5780638b79543c14610117578063a67e210a1461013e578063ad007d6314610153578063ebe352a41461017a57600080fd5b80634833b512146100825780636abcf8e3146100ab5780637559aaaa146100f7575b600080fd5b610095610090366004611a0e565b61018d565b6040516100a29190611d25565b60405180910390f35b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b61010a610105366004611a0e565b610251565b6040516100a29190611c6f565b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b61015161014c366004611a30565b610342565b005b6100d27f000000000000000000000000000000000000000000000000000000000000000081565b610151610188366004611b6b565b610ec2565b60008281526001602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610245576000848152602090819020604080516080810182529185015460ff811615158352610100810461ffff16838501526301000000810465ffffffffffff16918301919091526901000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660608201528252600190920191016101c3565b50505050905092915050565b6000828152602081815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b828210156102455760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a08301529083529092019101610285565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156103c857600080fd5b505afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040091906119cd565b6040517f4fe0eced000000000000000000000000000000000000000000000000000000008152600481018590528490600e9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801561048b57600080fd5b505afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906119cd565b3373ffffffffffffffffffffffffffffffffffffffff851614806105b557506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b591906119f1565b806105d557503373ffffffffffffffffffffffffffffffffffffffff8216145b6106265760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b60008551116106775760405162461bcd60e51b815260206004820152601e60248201527f4d6f6453746f72653a3a7365745061796f75744d6f64733a204e4f5f4f500000604482015260640161061d565b600087815260208181526040808320898452825280832080548251818502810185019093528083529192909190849084015b828210156107665760008481526020908190206040805160c08101825260028602909201805460ff811615158452610100810461ffff16848601526301000000810465ffffffffffff1692840192909252690100000000000000000090910473ffffffffffffffffffffffffffffffffffffffff9081166060840152600191820154908116608084015274010000000000000000000000000000000000000000900466ffffffffffffff1660a083015290835290920191016106a9565b50505050905060005b8151811015610a295781818151811061078a5761078a611f84565b60200260200101516040015165ffffffffffff16421015610a17576000805b88518110156109a2578383815181106107c4576107c4611f84565b60200260200101516020015161ffff168982815181106107e6576107e6611f84565b60200260200101516020015161ffff16148015610868575083838151811061081057610810611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1689828151811061084457610844611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b80156108d9575083838151811061088157610881611f84565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff168982815181106108b5576108b5611f84565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16145b801561093057508383815181106108f2576108f2611f84565b602002602001015160a0015166ffffffffffffff1689828151811061091957610919611f84565b602002602001015160a0015166ffffffffffffff16145b8015610986575083838151811061094957610949611f84565b60200260200101516040015165ffffffffffff1689828151811061096f5761096f611f84565b60200260200101516040015165ffffffffffff1610155b1561099057600191505b8061099a81611f1c565b9150506107a9565b5080610a155760405162461bcd60e51b8152602060048201526024808201527f4d6f6453746f72653a3a7365745061796f75744d6f64733a20534f4d455f4c4f60448201527f434b454400000000000000000000000000000000000000000000000000000000606482015260840161061d565b505b80610a2181611f1c565b91505061076f565b506000888152602081815260408083208a84529091528120610a4a916118c2565b6000805b8751811015610eb6576000888281518110610a6b57610a6b611f84565b60200260200101516020015161ffff1611610aee5760405162461bcd60e51b815260206004820152602860248201527f4d6f6453746f72653a3a7365745061796f75744d6f64733a204241445f4d4f4460448201527f5f50455243454e54000000000000000000000000000000000000000000000000606482015260840161061d565b878181518110610b0057610b00611f84565b60200260200101516020015161ffff1682610b1b9190611f04565b9150612710821115610b955760405162461bcd60e51b815260206004820152602a60248201527f4d6f6453746f72653a3a7365745061796f75744d6f64733a204241445f544f5460448201527f414c5f50455243454e5400000000000000000000000000000000000000000000606482015260840161061d565b600073ffffffffffffffffffffffffffffffffffffffff16888281518110610bbf57610bbf611f84565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16141580610c385750600073ffffffffffffffffffffffffffffffffffffffff16888281518110610c1357610c13611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b610caa5760405162461bcd60e51b815260206004820152602560248201527f4d6f6453746f72653a3a7365745061796f75744d6f64733a205a45524f5f414460448201527f4452455353000000000000000000000000000000000000000000000000000000606482015260840161061d565b60008a8152602081815260408083208c845290915290208851899083908110610cd557610cd5611f84565b6020908102919091018101518254600180820185556000948552938390208251600290920201805493830151604084015160608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009096169315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff169390931761010061ffff90921691909102177fffffff0000000000000000000000000000000000000000000000000000ffffff16630100000065ffffffffffff909316929092027fffffff0000000000000000000000000000000000000000ffffffffffffffffff1691909117690100000000000000000073ffffffffffffffffffffffffffffffffffffffff9485160217815560808201519301805460a090920151939092167fffffffffff000000000000000000000000000000000000000000000000000000909116177401000000000000000000000000000000000000000066ffffffffffffff90931692909202919091179055875189908b907f11d093e1f86a50d3e49cd68b453d3dc4ea6c3785bf9d407f4ba2fcc44b0acbbd908b9085908110610e8557610e85611f84565b602002602001015133604051610e9c929190611dac565b60405180910390a380610eae81611f1c565b915050610a4e565b50505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610f4857600080fd5b505afa158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8091906119cd565b6040517f4fe0eced000000000000000000000000000000000000000000000000000000008152600481018590528490600f9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906119cd565b3373ffffffffffffffffffffffffffffffffffffffff8516148061113557506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156110fd57600080fd5b505afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113591906119f1565b8061115557503373ffffffffffffffffffffffffffffffffffffffff8216145b6111a15760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a45440000000000000000604482015260640161061d565b60008551116111f25760405162461bcd60e51b815260206004820152601e60248201527f4d6f6453746f72653a3a7365745469636b65744d6f64733a204e4f5f4f500000604482015260640161061d565b6000878152600160209081526040808320898452825280832080548251818502810185019093528083529192909190849084015b828210156112a8576000848152602090819020604080516080810182529185015460ff811615158352610100810461ffff16838501526301000000810465ffffffffffff16918301919091526901000000000000000000900473ffffffffffffffffffffffffffffffffffffffff166060820152825260019092019101611226565b50505050905060005b81518110156114a3578181815181106112cc576112cc611f84565b60200260200101516040015165ffffffffffff16421015611491576000805b885181101561141c5783838151811061130657611306611f84565b60200260200101516020015161ffff1689828151811061132857611328611f84565b60200260200101516020015161ffff161480156113aa575083838151811061135257611352611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1689828151811061138657611386611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b801561140057508383815181106113c3576113c3611f84565b60200260200101516040015165ffffffffffff168982815181106113e9576113e9611f84565b60200260200101516040015165ffffffffffff1610155b1561140a57600191505b8061141481611f1c565b9150506112eb565b508061148f5760405162461bcd60e51b8152602060048201526024808201527f4d6f6453746f72653a3a7365745469636b65744d6f64733a20534f4d455f4c4f60448201527f434b454400000000000000000000000000000000000000000000000000000000606482015260840161061d565b505b8061149b81611f1c565b9150506112b1565b5060008881526001602090815260408083208a845290915281206114c6916118e6565b6000805b8751811015610eb65760008882815181106114e7576114e7611f84565b60200260200101516020015161ffff161161156a5760405162461bcd60e51b815260206004820152602860248201527f4d6f6453746f72653a3a7365745469636b65744d6f64733a204241445f4d4f4460448201527f5f50455243454e54000000000000000000000000000000000000000000000000606482015260840161061d565b87818151811061157c5761157c611f84565b60200260200101516020015161ffff16826115979190611f04565b91506127108211156116115760405162461bcd60e51b815260206004820152602a60248201527f4d6f6453746f72653a3a7365745469636b65744d6f64733a204241445f544f5460448201527f414c5f50455243454e5400000000000000000000000000000000000000000000606482015260840161061d565b600073ffffffffffffffffffffffffffffffffffffffff1688828151811061163b5761163b611f84565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614156116d15760405162461bcd60e51b815260206004820152602560248201527f4d6f6453746f72653a3a7365745469636b65744d6f64733a205a45524f5f414460448201527f4452455353000000000000000000000000000000000000000000000000000000606482015260840161061d565b60008a81526001602090815260408083208c8452909152902088518990839081106116fe576116fe611f84565b60209081029190910181015182546001810184556000938452928290208151930180549282015160408301516060909301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009094169415157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff169490941761010061ffff90951694909402939093177fffffff0000000000000000000000000000000000000000000000000000ffffff16630100000065ffffffffffff909216919091027fffffff0000000000000000000000000000000000000000ffffffffffffffffff1617690100000000000000000073ffffffffffffffffffffffffffffffffffffffff90921691909102179055875189908b907fbe6dc180c545b9c03d152e2058d9c71d2c7a2f1b897461cd0a4a161ba011c1c3908b908590811061184a5761184a611f84565b602090810291909101810151604080518251151581528284015161ffff16938101939093528082015165ffffffffffff169083015260609081015173ffffffffffffffffffffffffffffffffffffffff169082015233608082015260a00160405180910390a3806118ba81611f1c565b9150506114ca565b50805460008255600202906000526020600020908101906118e39190611904565b50565b50805460008255906000526020600020908101906118e39190611969565b5b808211156119655780547fffffff00000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffff000000000000000000000000000000000000000000000000000000169055600201611905565b5090565b5b808211156119655780547fffffff000000000000000000000000000000000000000000000000000000000016815560010161196a565b803561ffff811681146119b257600080fd5b919050565b803565ffffffffffff811681146119b257600080fd5b6000602082840312156119df57600080fd5b81516119ea81611fe2565b9392505050565b600060208284031215611a0357600080fd5b81516119ea81612004565b60008060408385031215611a2157600080fd5b50508035926020909101359150565b60008060006060808587031215611a4657600080fd5b84359350602080860135935060408087013567ffffffffffffffff811115611a6d57600080fd5b8701601f81018913611a7e57600080fd5b8035611a91611a8c82611ee0565b611e91565b8181528481019083860160c0808502860188018e1015611ab057600080fd5b600095505b84861015611b585780828f031215611acc57600080fd5b611ad4611e45565b8235611adf81612004565b8152611aec838a016119a0565b89820152611afb8884016119b7565b8882015289830135611b0c81611fe2565b818b0152608083810135611b1f81611fe2565b9082015260a08381013566ffffffffffffff81168114611b3e57600080fd5b908201528452600195909501949287019290810190611ab5565b5050809750505050505050509250925092565b600080600060608486031215611b8057600080fd5b83359250602080850135925060408086013567ffffffffffffffff811115611ba757600080fd5b8601601f81018813611bb857600080fd5b8035611bc6611a8c82611ee0565b8082825285820191508584018b878560071b8701011115611be657600080fd5b60009450845b84811015611c5d57608080838f031215611c04578687fd5b611c0c611e6e565b8335611c1781612004565b8152611c24848b016119a0565b8a820152611c338985016119b7565b898201526060840135611c4581611fe2565b60608201528552938801939190910190600101611bec565b50508096505050505050509250925092565b6020808252825182820181905260009190848201906040850190845b81811015611d1957611d0683855180511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b9284019260c09290920191600101611c8b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d1957611d9983855180511515825261ffff602082015116602083015265ffffffffffff604082015116604083015273ffffffffffffffffffffffffffffffffffffffff60608201511660608301525050565b9284019260809290920191600101611d41565b60e08101611e22828580511515825261ffff602082015116602083015265ffffffffffff6040820151166040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152806080840151166080850152505066ffffffffffffff60a08201511660a08301525050565b73ffffffffffffffffffffffffffffffffffffffff831660c08301529392505050565b60405160c0810167ffffffffffffffff81118282101715611e6857611e68611fb3565b60405290565b6040516080810167ffffffffffffffff81118282101715611e6857611e68611fb3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ed857611ed8611fb3565b604052919050565b600067ffffffffffffffff821115611efa57611efa611fb3565b5060051b60200190565b60008219821115611f1757611f17611f55565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f4e57611f4e611f55565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146118e357600080fd5b80151581146118e357600080fdfea2646970667358221220f5ff44bbd6b7c4aaf5f08c5fa4aaae31cbabfbb390c80ca66c6629a163748efa64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Mods can be used to distribute a percentage of payments or tickets to preconfigured beneficiaries.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "The contract storing project information",
          "_terminalDirectory": "A directory of a project's current Candybox terminal to receive payments in."
        }
      },
      "payoutModsOf(uint256,uint256)": {
        "params": {
          "_configuration": "The configuration to get mods for.",
          "_projectId": "The ID of the project to get mods for."
        },
        "returns": {
          "_0": "An array of all mods for the project."
        }
      },
      "setPayoutMods(uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])": {
        "details": "Only the owner or operator of a project can make this call, or the current terminal of the project.",
        "params": {
          "_configuration": "The configuration to set the mods to be active during.",
          "_mods": "The payout mods to set.",
          "_projectId": "The project to add a mod to."
        }
      },
      "setTicketMods(uint256,uint256,(bool,uint16,uint48,address)[])": {
        "details": "Only the owner or operator of a project can make this call, or the current terminal of the project.",
        "params": {
          "_configuration": "The configuration to set the mods to be active during.",
          "_mods": "The ticket mods to set.",
          "_projectId": "The project to add a mod to."
        }
      },
      "ticketModsOf(uint256,uint256)": {
        "params": {
          "_configuration": "The configuration to get mods for.",
          "_projectId": "The ID of the project to get mods for."
        },
        "returns": {
          "_0": "An array of all mods for the project."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "payoutModsOf(uint256,uint256)": {
        "notice": " Get all payout mods for the specified project ID."
      },
      "projects()": {
        "notice": "The contract storing project information."
      },
      "setPayoutMods(uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])": {
        "notice": " Adds a mod to the payout mods list."
      },
      "setTicketMods(uint256,uint256,(bool,uint16,uint48,address)[])": {
        "notice": " Adds a mod to the ticket mods list."
      },
      "terminalDirectory()": {
        "notice": "The direct deposit terminals."
      },
      "ticketModsOf(uint256,uint256)": {
        "notice": " Get all ticket mods for the specified project ID."
      }
    },
    "notice": "Stores mods for each project.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6993,
        "contract": "contracts/ModStore.sol:ModStore",
        "label": "_payoutModsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(PayoutMod)16496_storage)dyn_storage))"
      },
      {
        "astId": 7001,
        "contract": "contracts/ModStore.sol:ModStore",
        "label": "_ticketModsOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(TicketMod)16505_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PayoutMod)16496_storage)dyn_storage": {
        "base": "t_struct(PayoutMod)16496_storage",
        "encoding": "dynamic_array",
        "label": "struct PayoutMod[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TicketMod)16505_storage)dyn_storage": {
        "base": "t_struct(TicketMod)16505_storage",
        "encoding": "dynamic_array",
        "label": "struct TicketMod[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IModAllocator)16477": {
        "encoding": "inplace",
        "label": "contract IModAllocator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(PayoutMod)16496_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PayoutMod[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PayoutMod)16496_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(TicketMod)16505_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TicketMod[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TicketMod)16505_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(PayoutMod)16496_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PayoutMod[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PayoutMod)16496_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(TicketMod)16505_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct TicketMod[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(TicketMod)16505_storage)dyn_storage)"
      },
      "t_struct(PayoutMod)16496_storage": {
        "encoding": "inplace",
        "label": "struct PayoutMod",
        "members": [
          {
            "astId": 16484,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "preferUnstaked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16486,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "percent",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16488,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "lockedUntil",
            "offset": 3,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 16490,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "beneficiary",
            "offset": 9,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 16493,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "allocator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IModAllocator)16477"
          },
          {
            "astId": 16495,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "projectId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TicketMod)16505_storage": {
        "encoding": "inplace",
        "label": "struct TicketMod",
        "members": [
          {
            "astId": 16498,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "preferUnstaked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16500,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "percent",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16502,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "lockedUntil",
            "offset": 3,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 16504,
            "contract": "contracts/ModStore.sol:ModStore",
            "label": "beneficiary",
            "offset": 9,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      }
    }
  }
}