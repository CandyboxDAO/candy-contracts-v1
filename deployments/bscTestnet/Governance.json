{
  "address": "0x05ED5FE62FDb5216b1105Ed7DE80A79b01D8642F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminalV1",
          "name": "_terminalV1",
          "type": "address"
        }
      ],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPrices",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        }
      ],
      "name": "addPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminal",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "contract ITerminal",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "allowMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminalV1",
          "name": "_terminalV1",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_newGovernance",
          "type": "address"
        }
      ],
      "name": "appointGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTickets",
          "type": "bool"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminalV1",
          "name": "_terminalV1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_permissionIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_projectIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_permissionIndexes",
          "type": "uint256[][]"
        }
      ],
      "name": "setOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "setProjectId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferProjectOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfae55d89b223015a60c52f900212b30b4af10bfce736e9919a02e91fff4d6781",
  "receipt": {
    "to": null,
    "from": "0xB29b99fF4C471497F884C44C42a690CAacaC12f3",
    "contractAddress": "0x05ED5FE62FDb5216b1105Ed7DE80A79b01D8642F",
    "transactionIndex": 8,
    "gasUsed": "1403552",
    "logsBloom": "0x
    "blockHash": "0x7fdb4ebccad0b99a441713f57e20fcbcf946e8d23191b6ea0332d8bb094b8a65",
    "transactionHash": "0xfae55d89b223015a60c52f900212b30b4af10bfce736e9919a02e91fff4d6781",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 16894262,
        "transactionHash": "0xfae55d89b223015a60c52f900212b30b4af10bfce736e9919a02e91fff4d6781",
        "address": "0x05ED5FE62FDb5216b1105Ed7DE80A79b01D8642F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b29b99ff4c471497f884c44c42a690caacac12f3"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x7fdb4ebccad0b99a441713f57e20fcbcf946e8d23191b6ea0332d8bb094b8a65"
      }
    ],
    "blockNumber": 16894262,
    "cumulativeGasUsed": "3760558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0xF3eb8F354DCf96b6514313e7750Ded0746a5b71c"
  ],
  "solcInputHash": "ccb7a7bd8fb2979a6e849901853bc8b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ITerminalV1\",\"name\":\"_terminalV1\",\"type\":\"address\"}],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPrices\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"addPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITerminal\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"contract ITerminal\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITerminalV1\",\"name\":\"_terminalV1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"appointGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTickets\",\"type\":\"bool\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITerminalV1\",\"name\":\"_terminalV1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_permissionIndexes\",\"type\":\"uint256[]\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_permissionIndexes\",\"type\":\"uint256[][]\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"setProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferProjectOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernance(address)\":{\"params\":{\"_terminalV1\":\"The terminalV1 to change the governance of.\"}},\"addPriceFeed(address,address,uint256)\":{\"params\":{\"_currency\":\"The currency the price feed is for.\",\"_feed\":\"The price feed to add.\",\"_prices\":\"The prices contract to add a feed to.\"}},\"allowMigration(address,address)\":{\"params\":{\"_from\":\"The terminal to allow a new migration from.\",\"_to\":\"The terminal to allow migration to.\"}},\"appointGovernance(address,address)\":{\"params\":{\"_newGovernance\":\"The address to appoint as governance.\",\"_terminalV1\":\"The terminalV1 to change the governance of.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pay(address,string,bool)\":{\"params\":{\"_beneficiary\":\"The address who will receive tickets from this fee.\",\"_memo\":\"A memo that will be included in the published event.\",\"_preferUnstakedTickets\":\"Whether ERC20's should be claimed automatically if they have been issued.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(address,uint256)\":{\"params\":{\"_fee\":\"The new fee.\",\"_terminalV1\":\"The terminalV1 to change the fee of.\"}},\"setProjectId(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project that is being managed.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferProjectOwnership(address,address,uint256,bytes)\":{\"details\":\"This contract will no longer be able to reconfigure or tap funds from this project.\",\"params\":{\"_data\":\"Arbitrary data to include in the transaction.\",\"_newOwner\":\"The new project owner.\",\"_projectId\":\"The ID of the project to transfer ownership of.\",\"_projects\":\"The projects contract.\"}},\"withdraw(address,uint256)\":{\"params\":{\"_amount\":\"The amount to send.\",\"_beneficiary\":\"The address to send the funds to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptGovernance(address)\":{\"notice\":\"Accepts the offer to be the governance of a new terminalV1.\"},\"addPriceFeed(address,address,uint256)\":{\"notice\":\"Adds a price feed.\"},\"allowMigration(address,address)\":{\"notice\":\"Gives projects using one Terminal access to migrate to another Terminal.\"},\"appointGovernance(address,address)\":{\"notice\":\"Appoints a new governance for the specified terminalV1.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Allows this contract to receive a project.\"},\"pay(address,string,bool)\":{\"notice\":\"Make a payment to this project.\"},\"projectId()\":{\"notice\":\"The ID of the project that should be used to forward this contract's received payments.\"},\"setFee(address,uint256)\":{\"notice\":\"Sets the fee of the TerminalV1.\"},\"setProjectId(uint256)\":{\"notice\":\"Allows the project that is being managed to be set.\"},\"terminalDirectory()\":{\"notice\":\"The direct deposit terminals.\"},\"transferProjectOwnership(address,address,uint256,bytes)\":{\"notice\":\"Transfer the ownership of the project to a new owner.  \"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws funds stored in this contract.\"}},\"notice\":\"Owner should eventually change to a multisig wallet contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./interfaces/ITerminal.sol\\\";\\r\\nimport \\\"./interfaces/IPrices.sol\\\";\\r\\nimport \\\"./abstract/CandyboxProject.sol\\\";\\r\\n\\r\\n/// Owner should eventually change to a multisig wallet contract.\\r\\ncontract Governance is CandyboxProject {\\r\\n    // --- external transactions --- //\\r\\n\\r\\n    constructor(uint256 _projectId, ITerminalDirectory _terminalDirectory)\\r\\n        CandyboxProject(_projectId, _terminalDirectory)\\r\\n    {}\\r\\n\\r\\n    /** \\r\\n      @notice Gives projects using one Terminal access to migrate to another Terminal.\\r\\n      @param _from The terminal to allow a new migration from.\\r\\n      @param _to The terminal to allow migration to.\\r\\n    */\\r\\n    function allowMigration(ITerminal _from, ITerminal _to) external onlyOwner {\\r\\n        _from.allowMigration(_to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Adds a price feed.\\r\\n        @param _prices The prices contract to add a feed to.\\r\\n        @param _feed The price feed to add.\\r\\n        @param _currency The currency the price feed is for.\\r\\n    */\\r\\n    function addPriceFeed(\\r\\n        IPrices _prices,\\r\\n        AggregatorV3Interface _feed,\\r\\n        uint256 _currency\\r\\n    ) external onlyOwner {\\r\\n        _prices.addFeed(_feed, _currency);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Sets the fee of the TerminalV1.\\r\\n      @param _terminalV1 The terminalV1 to change the fee of.\\r\\n      @param _fee The new fee.\\r\\n    */\\r\\n    function setFee(ITerminalV1 _terminalV1, uint256 _fee) external onlyOwner {\\r\\n        _terminalV1.setFee(_fee);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Appoints a new governance for the specified terminalV1.\\r\\n      @param _terminalV1 The terminalV1 to change the governance of.\\r\\n      @param _newGovernance The address to appoint as governance.\\r\\n    */\\r\\n    function appointGovernance(\\r\\n        ITerminalV1 _terminalV1,\\r\\n        address payable _newGovernance\\r\\n    ) external onlyOwner {\\r\\n        _terminalV1.appointGovernance(_newGovernance);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Accepts the offer to be the governance of a new terminalV1.\\r\\n      @param _terminalV1 The terminalV1 to change the governance of.\\r\\n    */\\r\\n    function acceptGovernance(ITerminalV1 _terminalV1) external onlyOwner {\\r\\n        _terminalV1.acceptGovernance();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e20ae30855bc8bf6d7072a0543bdbca6b41e27bc7b2d70754090ca7288c1f45\",\"license\":\"MIT\"},\"contracts/abstract/CandyboxProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./../interfaces/ITerminalV1.sol\\\";\\r\\n\\r\\n/** \\r\\n  @notice A contract that inherits from CandyboxProject can use Candybox as a business-model-as-a-service.\\r\\n  @dev The owner of the contract makes admin decisions such as:\\r\\n    - Which address is the funding cycle owner, which can tap funds from the funding cycle.\\r\\n    - Should this project's Tickets be migrated to a new TerminalV1. \\r\\n*/\\r\\nabstract contract CandyboxProject is IERC721Receiver, Ownable {\\r\\n    /// @notice The direct deposit terminals.\\r\\n    ITerminalDirectory public immutable terminalDirectory;\\r\\n\\r\\n    /// @notice The ID of the project that should be used to forward this contract's received payments.\\r\\n    uint256 public projectId;\\r\\n\\r\\n    /** \\r\\n      @param _projectId The ID of the project that should be used to forward this contract's received payments.\\r\\n      @param _terminalDirectory A directory of a project's current Candybox terminal to receive payments in.\\r\\n    */\\r\\n    constructor(uint256 _projectId, ITerminalDirectory _terminalDirectory) {\\r\\n        projectId = _projectId;\\r\\n        terminalDirectory = _terminalDirectory;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /** \\r\\n      @notice Withdraws funds stored in this contract.\\r\\n      @param _beneficiary The address to send the funds to.\\r\\n      @param _amount The amount to send.\\r\\n    */\\r\\n    function withdraw(address payable _beneficiary, uint256 _amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        Address.sendValue(_beneficiary, _amount);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Allows the project that is being managed to be set.\\r\\n      @param _projectId The ID of the project that is being managed.\\r\\n    */\\r\\n    function setProjectId(uint256 _projectId) external onlyOwner {\\r\\n        projectId = _projectId;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Make a payment to this project.\\r\\n      @param _beneficiary The address who will receive tickets from this fee.\\r\\n      @param _memo A memo that will be included in the published event.\\r\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\r\\n    */\\r\\n    function pay(\\r\\n        address _beneficiary,\\r\\n        string calldata _memo,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external payable {\\r\\n        require(projectId != 0, \\\"CandyboxProject::pay: PROJECT_NOT_FOUND\\\");\\r\\n\\r\\n        // Get the terminal for this contract's project.\\r\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\r\\n\\r\\n        // There must be a terminal.\\r\\n        require(\\r\\n            _terminal != ITerminal(address(0)),\\r\\n            \\\"CandyboxProject::pay: TERMINAL_NOT_FOUND\\\"\\r\\n        );\\r\\n\\r\\n        _terminal.pay{value: msg.value}(\\r\\n            projectId,\\r\\n            _beneficiary,\\r\\n            _memo,\\r\\n            _preferUnstakedTickets\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Transfer the ownership of the project to a new owner.  \\r\\n        @dev This contract will no longer be able to reconfigure or tap funds from this project.\\r\\n        @param _projects The projects contract.\\r\\n        @param _newOwner The new project owner.\\r\\n        @param _projectId The ID of the project to transfer ownership of.\\r\\n        @param _data Arbitrary data to include in the transaction.\\r\\n    */\\r\\n    function transferProjectOwnership(\\r\\n        IProjects _projects,\\r\\n        address _newOwner,\\r\\n        uint256 _projectId,\\r\\n        bytes calldata _data\\r\\n    ) external onlyOwner {\\r\\n        _projects.safeTransferFrom(address(this), _newOwner, _projectId, _data);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Allows this contract to receive a project.\\r\\n    */\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) public pure override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function setOperator(\\r\\n        IOperatorStore _operatorStore,\\r\\n        address _operator,\\r\\n        uint256 _projectId,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external onlyOwner {\\r\\n        _operatorStore.setOperator(_operator, _projectId, _permissionIndexes);\\r\\n    }\\r\\n\\r\\n    function setOperators(\\r\\n        IOperatorStore _operatorStore,\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _projectIds,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external onlyOwner {\\r\\n        _operatorStore.setOperators(\\r\\n            _operators,\\r\\n            _projectIds,\\r\\n            _permissionIndexes\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Take a fee for this project from this contract.\\r\\n      @param _amount The payment amount.\\r\\n      @param _beneficiary The address who will receive tickets from this fee.\\r\\n      @param _memo A memo that will be included in the published event.\\r\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\r\\n    */\\r\\n    function _takeFee(\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        string memory _memo,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) internal {\\r\\n        require(projectId != 0, \\\"CandyboxProject::takeFee: PROJECT_NOT_FOUND\\\");\\r\\n        // Find the terminal for this contract's project.\\r\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\r\\n\\r\\n        // There must be a terminal.\\r\\n        require(\\r\\n            _terminal != ITerminal(address(0)),\\r\\n            \\\"CandyboxProject::takeFee: TERMINAL_NOT_FOUND\\\"\\r\\n        );\\r\\n\\r\\n        // There must be enough funds in the contract to take the fee.\\r\\n        require(\\r\\n            address(this).balance >= _amount,\\r\\n            \\\"CandyboxProject::takeFee: INSUFFICIENT_FUNDS\\\"\\r\\n        );\\r\\n\\r\\n        // Send funds to the terminal.\\r\\n        _terminal.pay{value: _amount}(\\r\\n            projectId,\\r\\n            _beneficiary,\\r\\n            _memo,\\r\\n            _preferUnstakedTickets\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5c10c2801b56af012967872d0a4e0526a3ce9468cb4d99a08e0da65cfad6bdf4\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\n\\r\\ninterface IDirectPaymentAddress {\\r\\n    event Forward(\\r\\n        address indexed payer,\\r\\n        uint256 indexed projectId,\\r\\n        address beneficiary,\\r\\n        uint256 value,\\r\\n        string memo,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd06e33fc4ee499a075753fef5254d67e2c5b34a1f59383aff3d39542493076ce\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\nenum BallotState {\\r\\n    Approved,\\r\\n    Active,\\r\\n    Failed,\\r\\n    Standby\\r\\n}\\r\\n\\r\\ninterface IFundingCycleBallot {\\r\\n    function duration() external view returns (uint256);\\r\\n\\r\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n}\\r\\n\",\"keccak256\":\"0x390d880eda3e7c2548b2b3550509b871d3a78d2a9b65082e6e6a2879b679f5f5\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IPrices.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IFundingCycleBallot.sol\\\";\\r\\n\\r\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\r\\nstruct FundingCycle {\\r\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\r\\n    uint256 id;\\r\\n    // The ID of the project contract that this funding cycle belongs to.\\r\\n    uint256 projectId;\\r\\n    // The number of this funding cycle for the project.\\r\\n    uint256 number;\\r\\n    // The ID of a previous funding cycle that this one is based on.\\r\\n    uint256 basedOn;\\r\\n    // The time when this funding cycle was last configured.\\r\\n    uint256 configured;\\r\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\r\\n    uint256 cycleLimit;\\r\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\r\\n    uint256 weight;\\r\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\r\\n    IFundingCycleBallot ballot;\\r\\n    // The time when this funding cycle will become active.\\r\\n    uint256 start;\\r\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\r\\n    uint256 duration;\\r\\n    // The amount that this funding cycle is targeting in terms of the currency.\\r\\n    uint256 target;\\r\\n    // The currency that the target is measured in.\\r\\n    uint256 currency;\\r\\n    // The percentage of each payment to send as a fee to the Candybox admin.\\r\\n    uint256 fee;\\r\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\r\\n    uint256 discountRate;\\r\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\r\\n    uint256 tapped;\\r\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\r\\n    uint256 metadata;\\r\\n}\\r\\n\\r\\nstruct FundingCycleProperties {\\r\\n    uint256 target;\\r\\n    uint256 currency;\\r\\n    uint256 duration;\\r\\n    uint256 cycleLimit;\\r\\n    uint256 discountRate;\\r\\n    IFundingCycleBallot ballot;\\r\\n}\\r\\n\\r\\ninterface IFundingCycles {\\r\\n    event Configure(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 reconfigured,\\r\\n        FundingCycleProperties _properties,\\r\\n        uint256 metadata,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Tap(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 newTappedAmount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Init(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 number,\\r\\n        uint256 previous,\\r\\n        uint256 weight,\\r\\n        uint256 start\\r\\n    );\\r\\n\\r\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function BASE_WEIGHT() external view returns (uint256);\\r\\n\\r\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\r\\n\\r\\n    function get(uint256 _fundingCycleId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function queuedOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentBallotStateOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n\\r\\n    function configure(\\r\\n        uint256 _projectId,\\r\\n        FundingCycleProperties calldata _properties,\\r\\n        uint256 _metadata,\\r\\n        uint256 _fee,\\r\\n        bool _configureActiveFundingCycle\\r\\n    ) external returns (FundingCycle memory fundingCycle);\\r\\n\\r\\n    function tap(uint256 _projectId, uint256 _amount)\\r\\n        external\\r\\n        returns (FundingCycle memory fundingCycle);\\r\\n}\\r\\n\",\"keccak256\":\"0xd44d3fa53e2e3925e134164528fcc3eda30bc8a4b2f97e2aa493cd8401b5e8a0\",\"license\":\"MIT\"},\"contracts/interfaces/IModAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IModAllocator {\\r\\n    event Allocate(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed forProjectId,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function allocate(\\r\\n        uint256 _projectId,\\r\\n        uint256 _forProjectId,\\r\\n        address _beneficiary\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xc1eb226ba764a20efe62a2648fe6665cee3c5f89c74e47b0ac2c412184e92ada\",\"license\":\"MIT\"},\"contracts/interfaces/IModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IModAllocator.sol\\\";\\r\\n\\r\\nstruct PayoutMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n    IModAllocator allocator;\\r\\n    uint56 projectId;\\r\\n}\\r\\n\\r\\nstruct TicketMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n}\\r\\n\\r\\ninterface IModStore {\\r\\n    event SetPayoutMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        PayoutMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetTicketMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        TicketMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (PayoutMod[] memory);\\r\\n\\r\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (TicketMod[] memory);\\r\\n\\r\\n    function setPayoutMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        PayoutMod[] memory _mods\\r\\n    ) external;\\r\\n\\r\\n    function setTicketMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        TicketMod[] memory _mods\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x32030d8e78b72a8a1d4744bf362e7f5268f90f169c41519ef74292f18f02d97b\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOperatorStore {\\r\\n    event SetOperator(\\r\\n        address indexed operator,\\r\\n        address indexed account,\\r\\n        uint256 indexed domain,\\r\\n        uint256[] permissionIndexes,\\r\\n        uint256 packed\\r\\n    );\\r\\n\\r\\n    function permissionsOf(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function hasPermission(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _permissionIndex\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function hasPermissions(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setOperator(\\r\\n        address _operator,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external;\\r\\n\\r\\n    function setOperators(\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _domains,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf36c573b8146fcb6819a957dfc581ba906ccd5e109dfb1e2a8bc686efc2407fa\",\"license\":\"MIT\"},\"contracts/interfaces/IPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IPrices {\\r\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\r\\n\\r\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\r\\n\\r\\n    function targetDecimals() external returns (uint256);\\r\\n\\r\\n    function feedFor(uint256 _currency)\\r\\n        external\\r\\n        returns (AggregatorV3Interface);\\r\\n\\r\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\r\\n\\r\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbd9b30d1e76172d0dce0daca098d2ca8be7088a387c0381aa818187f53f90cb0\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IProjects is IERC721 {\\r\\n    event Create(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed owner,\\r\\n        bytes32 indexed handle,\\r\\n        string uri,\\r\\n        ITerminal terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetHandle(\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\r\\n\\r\\n    event TransferHandle(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed to,\\r\\n        bytes32 indexed handle,\\r\\n        bytes32 newHandle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ClaimHandle(\\r\\n        address indexed account,\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ChallengeHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 challengeExpiry,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event RenewHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 indexed projectId,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\r\\n\\r\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\r\\n\\r\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\r\\n\\r\\n    function transferAddressFor(bytes32 _handle)\\r\\n        external\\r\\n        returns (address receiver);\\r\\n\\r\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\r\\n\\r\\n    function exists(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n    function create(\\r\\n        address _owner,\\r\\n        bytes32 _handle,\\r\\n        string calldata _uri,\\r\\n        ITerminal _terminal\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\r\\n\\r\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\r\\n\\r\\n    function transferHandle(\\r\\n        uint256 _projectId,\\r\\n        address _to,\\r\\n        bytes32 _newHandle\\r\\n    ) external returns (bytes32 _handle);\\r\\n\\r\\n    function claimHandle(\\r\\n        bytes32 _handle,\\r\\n        address _for,\\r\\n        uint256 _projectId\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62f6370a1ee64fb5642159b7049715a59404815de69a26dcfe60e0b40e30ff01\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport './ITerminalDirectory.sol';\\r\\n\\r\\ninterface ITerminal {\\r\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n\\r\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\r\\n\\r\\n  function pay(\\r\\n    uint256 _projectId,\\r\\n    address _beneficiary,\\r\\n    string calldata _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external payable returns (uint256 fundingCycleId);\\r\\n\\r\\n  function addToBalance(uint256 _projectId) external payable;\\r\\n\\r\\n  function allowMigration(ITerminal _contract) external;\\r\\n\\r\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3936e4ecc9600ca75b996fbc19674f1c2997be5899e77ae9ef240b410a9cb647\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\n\\r\\ninterface ITerminalDirectory {\\r\\n    event DeployAddress(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SetTerminal(\\r\\n        uint256 indexed projectId,\\r\\n        ITerminal indexed terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetPayerPreferences(\\r\\n        address indexed account,\\r\\n        address beneficiary,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\r\\n\\r\\n    function beneficiaryOf(address _account) external returns (address);\\r\\n\\r\\n    function unstakedTicketsPreferenceOf(address _account)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IDirectPaymentAddress[] memory);\\r\\n\\r\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\r\\n\\r\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\r\\n\\r\\n    function setPayerPreferences(\\r\\n        address _beneficiary,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf51c6dfb9b0236446e35701283ffb1c3508546ef9bf0e48933ea52f6b359c68\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\n\\r\\nimport './ITicketBooth.sol';\\r\\nimport './IFundingCycles.sol';\\r\\nimport './IYielder.sol';\\r\\nimport './IProjects.sol';\\r\\nimport './IModStore.sol';\\r\\nimport './IPrices.sol';\\r\\nimport './ITerminal.sol';\\r\\nimport './IOperatorStore.sol';\\r\\n\\r\\nstruct FundingCycleMetadata {\\r\\n  uint256 reservedRate;\\r\\n  uint256 bondingCurveRate;\\r\\n  uint256 reconfigurationBondingCurveRate;\\r\\n}\\r\\n\\r\\ninterface ITerminalV1 {\\r\\n  event Pay(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    string note,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event AddToBalance(uint256 indexed projectId, uint256 value, address caller);\\r\\n\\r\\n  event AllowMigration(ITerminal allowed);\\r\\n\\r\\n  event Migrate(uint256 indexed projectId, ITerminal indexed to, uint256 _amount, address caller);\\r\\n\\r\\n  event Configure(uint256 indexed fundingCycleId, uint256 indexed projectId, address caller);\\r\\n\\r\\n  event Tap(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    uint256 netTransferAmount,\\r\\n    uint256 beneficiaryTransferAmount,\\r\\n    uint256 govFeeAmount,\\r\\n    address caller\\r\\n  );\\r\\n  event Redeem(\\r\\n    address indexed holder,\\r\\n    address indexed beneficiary,\\r\\n    uint256 indexed _projectId,\\r\\n    uint256 amount,\\r\\n    uint256 returnAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event PrintReserveTickets(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 count,\\r\\n    uint256 beneficiaryTicketAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event DistributeToPayoutMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    PayoutMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event DistributeToTicketMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    TicketMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event AppointGovernance(address governance);\\r\\n\\r\\n  event AcceptGovernance(address governance);\\r\\n\\r\\n  event PrintPreminedTickets(\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    string memo,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event Deposit(uint256 amount);\\r\\n\\r\\n  event EnsureTargetLocalWei(uint256 target);\\r\\n\\r\\n  event SetYielder(IYielder newYielder);\\r\\n\\r\\n  event SetFee(uint256 _amount);\\r\\n\\r\\n  event SetTargetLocalWei(uint256 amount);\\r\\n\\r\\n  function governance() external view returns (address payable);\\r\\n\\r\\n  function pendingGovernance() external view returns (address payable);\\r\\n\\r\\n  function projects() external view returns (IProjects);\\r\\n\\r\\n  function fundingCycles() external view returns (IFundingCycles);\\r\\n\\r\\n  function ticketBooth() external view returns (ITicketBooth);\\r\\n\\r\\n  function prices() external view returns (IPrices);\\r\\n\\r\\n  function modStore() external view returns (IModStore);\\r\\n\\r\\n  function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function canPrintPreminedTickets(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n  function balanceOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function claimableOverflowOf(\\r\\n    address _account,\\r\\n    uint256 _amount,\\r\\n    uint256 _projectId\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function fee() external view returns (uint256);\\r\\n\\r\\n  function deploy(\\r\\n    address _owner,\\r\\n    bytes32 _handle,\\r\\n    string calldata _uri,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external;\\r\\n\\r\\n  function configure(\\r\\n    uint256 _projectId,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function printPreminedTickets(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    address _beneficiary,\\r\\n    string memory _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external;\\r\\n\\r\\n  function tap(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    uint256 _minReturnedWei\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function redeem(\\r\\n    address _account,\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _minReturnedWei,\\r\\n    address payable _beneficiary,\\r\\n    bool _preferUnstaked\\r\\n  ) external returns (uint256 returnAmount);\\r\\n\\r\\n  function printReservedTickets(uint256 _projectId)\\r\\n    external\\r\\n    returns (uint256 reservedTicketsToPrint);\\r\\n\\r\\n  function setFee(uint256 _fee) external;\\r\\n\\r\\n  function appointGovernance(address payable _pendingGovernance) external;\\r\\n\\r\\n  function acceptGovernance() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1c04cb166a1506d27dab54014bf6923d5908a00c20cc80c375519be3e38f50\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./ITickets.sol\\\";\\r\\n\\r\\ninterface ITicketBooth {\\r\\n    event Issue(\\r\\n        uint256 indexed projectId,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        address caller\\r\\n    );\\r\\n    event Print(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        bool convertedTickets,\\r\\n        bool preferUnstakedTickets,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Redeem(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 stakedTickets,\\r\\n        bool preferUnstaked,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Stake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unstake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Lock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unlock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        address indexed recipient,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function lockedBalanceBy(\\r\\n        address _operator,\\r\\n        address _holder,\\r\\n        uint256 _projectId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakedTotalSupplyOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _result);\\r\\n\\r\\n    function issue(\\r\\n        uint256 _projectId,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external;\\r\\n\\r\\n    function print(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n\\r\\n    function redeem(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstaked\\r\\n    ) external;\\r\\n\\r\\n    function stake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function lock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unlock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function transfer(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbb38c02b16bb49b062d3f540a6648f3aea32840b31fb9c70fc97bf2fda281a95\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITickets is IERC20 {\\r\\n    function print(address _account, uint256 _amount) external;\\r\\n\\r\\n    function redeem(address _account, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaec6f741c90690d9c596e897db9d96bc113a63adbfdd5b971aa2abbe3213da32\",\"license\":\"MIT\"},\"contracts/interfaces/IYielder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\r\\ninterface IYielder {\\r\\n    function deposited() external view returns (uint256);\\r\\n\\r\\n    function getCurrentBalance() external view returns (uint256);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\r\\n\\r\\n    function withdrawAll(address payable _beneficiary)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x252df2bae92a7023ccce3134dc9e616fd5337cecfb025026544a565512ac82d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516118b83803806118b883398101604081905261002f916100a8565b818161003a33610058565b60019190915560601b6001600160601b031916608052506100e59050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100bb57600080fd5b825160208401519092506001600160a01b03811681146100da57600080fd5b809150509250929050565b60805160601c6117ae61010a60003960008181610231015261086501526117ae6000f3fe6080604052600436106101125760003560e01c8063897c063e116100a5578063c0a485e211610074578063e55156b511610059578063e55156b51461036b578063f2fde38b1461038b578063f3fef3a3146103ab57600080fd5b8063c0a485e21461032b578063ce9246dd1461034b57600080fd5b8063897c063e146102ad5780638da5cb5b146102c0578063999a244f146102eb578063bda773861461030b57600080fd5b80635f23d794116100e15780635f23d794146101ff5780636abcf8e31461021f578063715018a614610278578063787768821461028d57600080fd5b8063150b7a021461011e5780631d6c1343146101995780633fafa127146101bb578063544c0e15146101df57600080fd5b3661011957005b600080fd5b34801561012a57600080fd5b506101636101393660046111ee565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b3480156101a557600080fd5b506101b96101b436600461141e565b6103cb565b005b3480156101c757600080fd5b506101d160015481565b604051908152602001610190565b3480156101eb57600080fd5b506101b96101fa3660046112ce565b6104bd565b34801561020b57600080fd5b506101b961021a36600461119e565b6105b5565b34801561022b57600080fd5b506102537f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b34801561028457600080fd5b506101b961067f565b34801561029957600080fd5b506101b96102a836600461141e565b6106f2565b6101b96102bb366004611261565b6107ad565b3480156102cc57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610253565b3480156102f757600080fd5b506101b9610306366004611330565b610a26565b34801561031757600080fd5b506101b96103263660046113dd565b610b24565b34801561033757600080fd5b506101b96103463660046111ee565b610c18565b34801561035757600080fd5b506101b9610366366004611474565b610cd9565b34801561037757600080fd5b506101b96103863660046111c2565b610d45565b34801561039757600080fd5b506101b96103a636600461119e565b610dff565b3480156103b757600080fd5b506101b96103c63660046111c2565b610efb565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517fe2c673a500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063e2c673a5906024015b600060405180830381600087803b1580156104a157600080fd5b505af11580156104b5573d6000803e3d6000fd5b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f5ea6cc8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690635ea6cc869061057c908790879087908790600401611589565b600060405180830381600087803b15801561059657600080fd5b505af11580156105aa573d6000803e3d6000fd5b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b8073ffffffffffffffffffffffffffffffffffffffff1663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6106f06000610f70565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f308a20ad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063308a20ad90602401610487565b6001546108225760405162461bcd60e51b815260206004820152602760248201527f43616e6479626f7850726f6a6563743a3a7061793a2050524f4a4543545f4e4f60448201527f545f464f554e4400000000000000000000000000000000000000000000000000606482015260840161042e565b6001546040517f4fe0eced00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634fe0eced9161089c9160040190815260200190565b60206040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec9190611457565b905073ffffffffffffffffffffffffffffffffffffffff81166109775760405162461bcd60e51b815260206004820152602860248201527f43616e6479626f7850726f6a6563743a3a7061793a205445524d494e414c5f4e60448201527f4f545f464f554e44000000000000000000000000000000000000000000000000606482015260840161042e565b6001546040517f02c8986f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316916302c8986f9134916109d4918a908a908a908a9060040161170c565b6020604051808303818588803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104b5919061148d565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f93535be100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906393535be190610ae9908990899089908990899089906004016115c9565b600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b8b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517fa967c20b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a967c20b90604401600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c7f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517fb88d4fde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063b88d4fde9061057c903090889088908890889060040161153e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f69fe0e2d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8316906369fe0e2d90602401610487565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b73ffffffffffffffffffffffffffffffffffffffff8116610eef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161042e565b610ef881610f70565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b610f6c8282610fe5565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156110355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161042e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508061110b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161042e565b505050565b60008083601f84011261112257600080fd5b50813567ffffffffffffffff81111561113a57600080fd5b6020830191508360208260051b850101111561115557600080fd5b9250929050565b60008083601f84011261116e57600080fd5b50813567ffffffffffffffff81111561118657600080fd5b60208301915083602082850101111561115557600080fd5b6000602082840312156111b057600080fd5b81356111bb81611756565b9392505050565b600080604083850312156111d557600080fd5b82356111e081611756565b946020939093013593505050565b60008060008060006080868803121561120657600080fd5b853561121181611756565b9450602086013561122181611756565b935060408601359250606086013567ffffffffffffffff81111561124457600080fd5b6112508882890161115c565b969995985093965092949392505050565b6000806000806060858703121561127757600080fd5b843561128281611756565b9350602085013567ffffffffffffffff81111561129e57600080fd5b6112aa8782880161115c565b909450925050604085013580151581146112c357600080fd5b939692955090935050565b6000806000806000608086880312156112e657600080fd5b85356112f181611756565b9450602086013561130181611756565b935060408601359250606086013567ffffffffffffffff81111561132457600080fd5b61125088828901611110565b60008060008060008060006080888a03121561134b57600080fd5b873561135681611756565b9650602088013567ffffffffffffffff8082111561137357600080fd5b61137f8b838c01611110565b909850965060408a013591508082111561139857600080fd5b6113a48b838c01611110565b909650945060608a01359150808211156113bd57600080fd5b506113ca8a828b01611110565b989b979a50959850939692959293505050565b6000806000606084860312156113f257600080fd5b83356113fd81611756565b9250602084013561140d81611756565b929592945050506040919091013590565b6000806040838503121561143157600080fd5b823561143c81611756565b9150602083013561144c81611756565b809150509250929050565b60006020828403121561146957600080fd5b81516111bb81611756565b60006020828403121561148657600080fd5b5035919050565b60006020828403121561149f57600080fd5b5051919050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156114d857600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff80881683528087166020840152508460408301526080606083015261157e6080830184866114f5565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201526060604082015260006115bf6060830184866114a6565b9695505050505050565b6060808252810186905260008760808301825b898110156116195782356115ef81611756565b73ffffffffffffffffffffffffffffffffffffffff168252602092830192909101906001016115dc565b50602091508381038285015261163081888a6114a6565b84810360408601528581529050818101600586811b830184018860005b898110156116f9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086840301855281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18c36030181126116ae57600080fd5b8b01803567ffffffffffffffff8111156116c757600080fd5b80861b36038d13156116d857600080fd5b6116e585828b85016114a6565b96890196945050509086019060010161164d565b50909d9c50505050505050505050505050565b85815273ffffffffffffffffffffffffffffffffffffffff851660208201526080604082015260006117426080830185876114f5565b905082151560608301529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ef857600080fdfea2646970667358221220a7698d4673e211ddaf6b50fcf508a9f9edcc101b4e632518abc4768f484dc8e864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101125760003560e01c8063897c063e116100a5578063c0a485e211610074578063e55156b511610059578063e55156b51461036b578063f2fde38b1461038b578063f3fef3a3146103ab57600080fd5b8063c0a485e21461032b578063ce9246dd1461034b57600080fd5b8063897c063e146102ad5780638da5cb5b146102c0578063999a244f146102eb578063bda773861461030b57600080fd5b80635f23d794116100e15780635f23d794146101ff5780636abcf8e31461021f578063715018a614610278578063787768821461028d57600080fd5b8063150b7a021461011e5780631d6c1343146101995780633fafa127146101bb578063544c0e15146101df57600080fd5b3661011957005b600080fd5b34801561012a57600080fd5b506101636101393660046111ee565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b3480156101a557600080fd5b506101b96101b436600461141e565b6103cb565b005b3480156101c757600080fd5b506101d160015481565b604051908152602001610190565b3480156101eb57600080fd5b506101b96101fa3660046112ce565b6104bd565b34801561020b57600080fd5b506101b961021a36600461119e565b6105b5565b34801561022b57600080fd5b506102537f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b34801561028457600080fd5b506101b961067f565b34801561029957600080fd5b506101b96102a836600461141e565b6106f2565b6101b96102bb366004611261565b6107ad565b3480156102cc57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610253565b3480156102f757600080fd5b506101b9610306366004611330565b610a26565b34801561031757600080fd5b506101b96103263660046113dd565b610b24565b34801561033757600080fd5b506101b96103463660046111ee565b610c18565b34801561035757600080fd5b506101b9610366366004611474565b610cd9565b34801561037757600080fd5b506101b96103863660046111c2565b610d45565b34801561039757600080fd5b506101b96103a636600461119e565b610dff565b3480156103b757600080fd5b506101b96103c63660046111c2565b610efb565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517fe2c673a500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063e2c673a5906024015b600060405180830381600087803b1580156104a157600080fd5b505af11580156104b5573d6000803e3d6000fd5b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f5ea6cc8600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690635ea6cc869061057c908790879087908790600401611589565b600060405180830381600087803b15801561059657600080fd5b505af11580156105aa573d6000803e3d6000fd5b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b8073ffffffffffffffffffffffffffffffffffffffff1663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6106f06000610f70565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f308a20ad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063308a20ad90602401610487565b6001546108225760405162461bcd60e51b815260206004820152602760248201527f43616e6479626f7850726f6a6563743a3a7061793a2050524f4a4543545f4e4f60448201527f545f464f554e4400000000000000000000000000000000000000000000000000606482015260840161042e565b6001546040517f4fe0eced00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634fe0eced9161089c9160040190815260200190565b60206040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec9190611457565b905073ffffffffffffffffffffffffffffffffffffffff81166109775760405162461bcd60e51b815260206004820152602860248201527f43616e6479626f7850726f6a6563743a3a7061793a205445524d494e414c5f4e60448201527f4f545f464f554e44000000000000000000000000000000000000000000000000606482015260840161042e565b6001546040517f02c8986f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316916302c8986f9134916109d4918a908a908a908a9060040161170c565b6020604051808303818588803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104b5919061148d565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f93535be100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906393535be190610ae9908990899089908990899089906004016115c9565b600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b8b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517fa967c20b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a967c20b90604401600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c7f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517fb88d4fde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063b88d4fde9061057c903090889088908890889060040161153e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b6040517f69fe0e2d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8316906369fe0e2d90602401610487565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b73ffffffffffffffffffffffffffffffffffffffff8116610eef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161042e565b610ef881610f70565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042e565b610f6c8282610fe5565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156110355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161042e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508061110b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161042e565b505050565b60008083601f84011261112257600080fd5b50813567ffffffffffffffff81111561113a57600080fd5b6020830191508360208260051b850101111561115557600080fd5b9250929050565b60008083601f84011261116e57600080fd5b50813567ffffffffffffffff81111561118657600080fd5b60208301915083602082850101111561115557600080fd5b6000602082840312156111b057600080fd5b81356111bb81611756565b9392505050565b600080604083850312156111d557600080fd5b82356111e081611756565b946020939093013593505050565b60008060008060006080868803121561120657600080fd5b853561121181611756565b9450602086013561122181611756565b935060408601359250606086013567ffffffffffffffff81111561124457600080fd5b6112508882890161115c565b969995985093965092949392505050565b6000806000806060858703121561127757600080fd5b843561128281611756565b9350602085013567ffffffffffffffff81111561129e57600080fd5b6112aa8782880161115c565b909450925050604085013580151581146112c357600080fd5b939692955090935050565b6000806000806000608086880312156112e657600080fd5b85356112f181611756565b9450602086013561130181611756565b935060408601359250606086013567ffffffffffffffff81111561132457600080fd5b61125088828901611110565b60008060008060008060006080888a03121561134b57600080fd5b873561135681611756565b9650602088013567ffffffffffffffff8082111561137357600080fd5b61137f8b838c01611110565b909850965060408a013591508082111561139857600080fd5b6113a48b838c01611110565b909650945060608a01359150808211156113bd57600080fd5b506113ca8a828b01611110565b989b979a50959850939692959293505050565b6000806000606084860312156113f257600080fd5b83356113fd81611756565b9250602084013561140d81611756565b929592945050506040919091013590565b6000806040838503121561143157600080fd5b823561143c81611756565b9150602083013561144c81611756565b809150509250929050565b60006020828403121561146957600080fd5b81516111bb81611756565b60006020828403121561148657600080fd5b5035919050565b60006020828403121561149f57600080fd5b5051919050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156114d857600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff80881683528087166020840152508460408301526080606083015261157e6080830184866114f5565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201526060604082015260006115bf6060830184866114a6565b9695505050505050565b6060808252810186905260008760808301825b898110156116195782356115ef81611756565b73ffffffffffffffffffffffffffffffffffffffff168252602092830192909101906001016115dc565b50602091508381038285015261163081888a6114a6565b84810360408601528581529050818101600586811b830184018860005b898110156116f9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086840301855281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18c36030181126116ae57600080fd5b8b01803567ffffffffffffffff8111156116c757600080fd5b80861b36038d13156116d857600080fd5b6116e585828b85016114a6565b96890196945050509086019060010161164d565b50909d9c50505050505050505050505050565b85815273ffffffffffffffffffffffffffffffffffffffff851660208201526080604082015260006117426080830185876114f5565b905082151560608301529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ef857600080fdfea2646970667358221220a7698d4673e211ddaf6b50fcf508a9f9edcc101b4e632518abc4768f484dc8e864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernance(address)": {
        "params": {
          "_terminalV1": "The terminalV1 to change the governance of."
        }
      },
      "addPriceFeed(address,address,uint256)": {
        "params": {
          "_currency": "The currency the price feed is for.",
          "_feed": "The price feed to add.",
          "_prices": "The prices contract to add a feed to."
        }
      },
      "allowMigration(address,address)": {
        "params": {
          "_from": "The terminal to allow a new migration from.",
          "_to": "The terminal to allow migration to."
        }
      },
      "appointGovernance(address,address)": {
        "params": {
          "_newGovernance": "The address to appoint as governance.",
          "_terminalV1": "The terminalV1 to change the governance of."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pay(address,string,bool)": {
        "params": {
          "_beneficiary": "The address who will receive tickets from this fee.",
          "_memo": "A memo that will be included in the published event.",
          "_preferUnstakedTickets": "Whether ERC20's should be claimed automatically if they have been issued."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(address,uint256)": {
        "params": {
          "_fee": "The new fee.",
          "_terminalV1": "The terminalV1 to change the fee of."
        }
      },
      "setProjectId(uint256)": {
        "params": {
          "_projectId": "The ID of the project that is being managed."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferProjectOwnership(address,address,uint256,bytes)": {
        "details": "This contract will no longer be able to reconfigure or tap funds from this project.",
        "params": {
          "_data": "Arbitrary data to include in the transaction.",
          "_newOwner": "The new project owner.",
          "_projectId": "The ID of the project to transfer ownership of.",
          "_projects": "The projects contract."
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "_amount": "The amount to send.",
          "_beneficiary": "The address to send the funds to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptGovernance(address)": {
        "notice": "Accepts the offer to be the governance of a new terminalV1."
      },
      "addPriceFeed(address,address,uint256)": {
        "notice": "Adds a price feed."
      },
      "allowMigration(address,address)": {
        "notice": "Gives projects using one Terminal access to migrate to another Terminal."
      },
      "appointGovernance(address,address)": {
        "notice": "Appoints a new governance for the specified terminalV1."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Allows this contract to receive a project."
      },
      "pay(address,string,bool)": {
        "notice": "Make a payment to this project."
      },
      "projectId()": {
        "notice": "The ID of the project that should be used to forward this contract's received payments."
      },
      "setFee(address,uint256)": {
        "notice": "Sets the fee of the TerminalV1."
      },
      "setProjectId(uint256)": {
        "notice": "Allows the project that is being managed to be set."
      },
      "terminalDirectory()": {
        "notice": "The direct deposit terminals."
      },
      "transferProjectOwnership(address,address,uint256,bytes)": {
        "notice": "Transfer the ownership of the project to a new owner.  "
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws funds stored in this contract."
      }
    },
    "notice": "Owner should eventually change to a multisig wallet contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15358,
        "contract": "contracts/Governance.sol:Governance",
        "label": "projectId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}