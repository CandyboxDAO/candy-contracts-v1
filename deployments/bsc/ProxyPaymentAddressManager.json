{
  "address": "0x8c2439Eb3Be6d92A0E92D3625D19be2244a56Fe0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        },
        {
          "internalType": "contract ITicketBooth",
          "name": "_ticketBooth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Deploy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "addressesOf",
      "outputs": [
        {
          "internalType": "contract IProxyPaymentAddress[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBooth",
      "outputs": [
        {
          "internalType": "contract ITicketBooth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc63b4cac60978a80807a5a18f704887ab6097480441a7d1c0ad3407deda90285",
  "receipt": {
    "to": null,
    "from": "0xB29b99fF4C471497F884C44C42a690CAacaC12f3",
    "contractAddress": "0x8c2439Eb3Be6d92A0E92D3625D19be2244a56Fe0",
    "transactionIndex": 114,
    "gasUsed": "1213083",
    "logsBloom": "0x
    "blockHash": "0xb4dcec2b8b5229221dec62c18b66f8fdf7896f07cdf3b2ec7df2e49fb89f59de",
    "transactionHash": "0xc63b4cac60978a80807a5a18f704887ab6097480441a7d1c0ad3407deda90285",
    "logs": [],
    "blockNumber": 15476129,
    "cumulativeGasUsed": "14762836",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4d698441EEC2A7f1408679811DfA85fC6B18546",
    "0xFFFB3C2d3cFb43B61a04B5703692d21923f8558B"
  ],
  "solcInputHash": "ccb7a7bd8fb2979a6e849901853bc8b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"},{\"internalType\":\"contract ITicketBooth\",\"name\":\"_ticketBooth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Deploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"addressesOf\",\"outputs\":[{\"internalType\":\"contract IProxyPaymentAddress[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBooth\",\"outputs\":[{\"internalType\":\"contract ITicketBooth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addressesOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get proxy payment addresses for.\"},\"returns\":{\"_0\":\"A list of proxy payment addresses for the specified project ID.\"}},\"deploy(uint256,string)\":{\"params\":{\"_memo\":\"Memo that will be attached withdrawal transactions.\",\"_projectId\":\"ID of the project funds will be fowarded to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressesOf(uint256)\":{\"notice\":\" A list of all proxy payment addresses for the specified project ID.\"},\"deploy(uint256,string)\":{\"notice\":\"Deploys a proxy payment address.\"},\"terminalDirectory()\":{\"notice\":\"The directory that will be injected into proxy payment addresses.\"},\"ticketBooth()\":{\"notice\":\"The ticket boot that will be injected into proxy payment addresses.\"}},\"notice\":\"Manages deploying proxy payment addresses for Candybox projects.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProxyPaymentAddressManager.sol\":\"ProxyPaymentAddressManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ProxyPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IProxyPaymentAddress.sol\\\";\\r\\nimport \\\"./interfaces/ITerminalDirectory.sol\\\";\\r\\nimport \\\"./interfaces/ITicketBooth.sol\\\";\\r\\n\\r\\n/** \\r\\n  @notice\\r\\n  A contract that can receive and hold funds for a given project.\\r\\n  Once funds are tapped, tickets are printed and can be transferred out of the contract at a later date.\\r\\n\\r\\n  Particularly useful for routing funds from third-party platforms (e.g., Open Sea).\\r\\n*/\\r\\ncontract ProxyPaymentAddress is IProxyPaymentAddress, Ownable {\\r\\n    // --- public immutable stored properties --- //\\r\\n\\r\\n    /// @notice The directory to use when resolving which terminal to send the payment to.\\r\\n    ITerminalDirectory public immutable override terminalDirectory;\\r\\n\\r\\n    /// @notice The ticket booth to use when transferring tickets held by this contract to a beneficiary.\\r\\n    ITicketBooth public immutable override ticketBooth;\\r\\n\\r\\n    /// @notice The ID of the project tickets should be redeemed for.\\r\\n    uint256 public immutable override projectId;\\r\\n\\r\\n    /// @notice The memo to use when this contract forwards a payment to a terminal.\\r\\n    string public override memo;\\r\\n\\r\\n    constructor(\\r\\n        ITerminalDirectory _terminalDirectory,\\r\\n        ITicketBooth _ticketBooth,\\r\\n        uint256 _projectId,\\r\\n        string memory _memo\\r\\n    ) {\\r\\n        terminalDirectory = _terminalDirectory;\\r\\n        ticketBooth = _ticketBooth;\\r\\n        projectId = _projectId;\\r\\n        memo = _memo;\\r\\n    }\\r\\n\\r\\n    // Receive funds and hold them in the contract until they are ready to be transferred.\\r\\n    receive() external payable { \\r\\n        emit Receive(\\r\\n            msg.sender,\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Transfers all funds held in the contract to the terminal of the corresponding project.\\r\\n    function tap() external override {\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        terminalDirectory.terminalOf(projectId).pay{value: amount}(\\r\\n            projectId,\\r\\n            /*_beneficiary=*/address(this),\\r\\n            memo,\\r\\n            /*_preferUnstakedTickets=*/false\\r\\n        );\\r\\n\\r\\n        emit Tap(\\r\\n            msg.sender,\\r\\n            amount\\r\\n        ); \\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice Transfers tickets held by this contract to a beneficiary.\\r\\n      @param _beneficiary Address of the beneficiary tickets will be transferred to.\\r\\n    */\\r\\n    function transferTickets(address _beneficiary, uint256 _amount) external override onlyOwner {\\r\\n        ticketBooth.transfer(\\r\\n            address(this),\\r\\n            projectId,\\r\\n            _amount,\\r\\n            _beneficiary\\r\\n        );\\r\\n\\r\\n        emit TransferTickets(\\r\\n            msg.sender,\\r\\n            _beneficiary,\\r\\n            projectId,\\r\\n            _amount\\r\\n        );            \\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x10093f108c5d5b9a1ab202f93d12fa5df4aaba450594ddd51942478727e027e3\",\"license\":\"MIT\"},\"contracts/ProxyPaymentAddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./interfaces/ITicketBooth.sol\\\";\\r\\nimport \\\"./interfaces/ITerminalDirectory.sol\\\";\\r\\nimport \\\"./interfaces/IProxyPaymentAddress.sol\\\";\\r\\nimport \\\"./interfaces/IProxyPaymentAddressManager.sol\\\";\\r\\n\\r\\nimport \\\"./ProxyPaymentAddress.sol\\\";\\r\\n\\r\\n/** \\r\\n  @notice\\r\\n  Manages deploying proxy payment addresses for Candybox projects.\\r\\n*/\\r\\ncontract ProxyPaymentAddressManager is IProxyPaymentAddressManager {\\r\\n    // --- private stored properties --- //\\r\\n\\r\\n    // A mapping from project id to proxy payment addresses.\\r\\n    mapping(uint256 => IProxyPaymentAddress[]) private _addressesOf;\\r\\n\\r\\n    // --- public immutable stored properties --- //\\r\\n\\r\\n    /// @notice The directory that will be injected into proxy payment addresses.\\r\\n    ITerminalDirectory public immutable override terminalDirectory;\\r\\n\\r\\n    /// @notice The ticket boot that will be injected into proxy payment addresses.\\r\\n    ITicketBooth public immutable override ticketBooth;\\r\\n\\r\\n    constructor(\\r\\n        ITerminalDirectory _terminalDirectory,\\r\\n        ITicketBooth _ticketBooth\\r\\n    ) {\\r\\n        terminalDirectory = _terminalDirectory;\\r\\n        ticketBooth = _ticketBooth;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n      @notice \\r\\n      A list of all proxy payment addresses for the specified project ID.\\r\\n\\r\\n      @param _projectId The ID of the project to get proxy payment addresses for.\\r\\n\\r\\n      @return A list of proxy payment addresses for the specified project ID.\\r\\n    */\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (IProxyPaymentAddress[] memory)\\r\\n    {\\r\\n        return _addressesOf[_projectId];\\r\\n    }    \\r\\n\\r\\n    /** \\r\\n      @notice Deploys a proxy payment address.\\r\\n      @param _projectId ID of the project funds will be fowarded to.\\r\\n      @param _memo Memo that will be attached withdrawal transactions.\\r\\n    */\\r\\n    function deploy(uint256 _projectId, string memory _memo) external override returns(address) {\\r\\n        require(\\r\\n            _projectId > 0,\\r\\n            \\\"ProxyPaymentAddressManager::deploy: ZERO_PROJECT\\\"\\r\\n        );\\r\\n\\r\\n        // Create the proxy payment address contract.\\r\\n        ProxyPaymentAddress proxyPaymentAddress = new ProxyPaymentAddress(\\r\\n            terminalDirectory,\\r\\n            ticketBooth,\\r\\n            _projectId,\\r\\n            _memo\\r\\n        );\\r\\n\\r\\n        // Transfer ownership to the caller of this tx.\\r\\n        proxyPaymentAddress.transferOwnership(msg.sender);\\r\\n\\r\\n        // Push it to the list for the corresponding project.\\r\\n        _addressesOf[_projectId].push(proxyPaymentAddress);\\r\\n\\r\\n        emit Deploy(_projectId, _memo, msg.sender);\\r\\n\\r\\n        // Return the address of the proxy payment address.\\r\\n        return address(proxyPaymentAddress);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xb3b72cf95fc620661e11be21dd08a7e37aa761878d21e20540a8dd6437538231\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\n\\r\\ninterface IDirectPaymentAddress {\\r\\n    event Forward(\\r\\n        address indexed payer,\\r\\n        uint256 indexed projectId,\\r\\n        address beneficiary,\\r\\n        uint256 value,\\r\\n        string memo,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd06e33fc4ee499a075753fef5254d67e2c5b34a1f59383aff3d39542493076ce\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOperatorStore {\\r\\n    event SetOperator(\\r\\n        address indexed operator,\\r\\n        address indexed account,\\r\\n        uint256 indexed domain,\\r\\n        uint256[] permissionIndexes,\\r\\n        uint256 packed\\r\\n    );\\r\\n\\r\\n    function permissionsOf(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function hasPermission(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _permissionIndex\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function hasPermissions(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setOperator(\\r\\n        address _operator,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external;\\r\\n\\r\\n    function setOperators(\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _domains,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf36c573b8146fcb6819a957dfc581ba906ccd5e109dfb1e2a8bc686efc2407fa\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IProjects is IERC721 {\\r\\n    event Create(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed owner,\\r\\n        bytes32 indexed handle,\\r\\n        string uri,\\r\\n        ITerminal terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetHandle(\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\r\\n\\r\\n    event TransferHandle(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed to,\\r\\n        bytes32 indexed handle,\\r\\n        bytes32 newHandle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ClaimHandle(\\r\\n        address indexed account,\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ChallengeHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 challengeExpiry,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event RenewHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 indexed projectId,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\r\\n\\r\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\r\\n\\r\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\r\\n\\r\\n    function transferAddressFor(bytes32 _handle)\\r\\n        external\\r\\n        returns (address receiver);\\r\\n\\r\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\r\\n\\r\\n    function exists(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n    function create(\\r\\n        address _owner,\\r\\n        bytes32 _handle,\\r\\n        string calldata _uri,\\r\\n        ITerminal _terminal\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\r\\n\\r\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\r\\n\\r\\n    function transferHandle(\\r\\n        uint256 _projectId,\\r\\n        address _to,\\r\\n        bytes32 _newHandle\\r\\n    ) external returns (bytes32 _handle);\\r\\n\\r\\n    function claimHandle(\\r\\n        bytes32 _handle,\\r\\n        address _for,\\r\\n        uint256 _projectId\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62f6370a1ee64fb5642159b7049715a59404815de69a26dcfe60e0b40e30ff01\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITicketBooth.sol\\\";\\r\\n\\r\\ninterface IProxyPaymentAddress {\\r\\n\\r\\n    event Receive(\\r\\n        address indexed caller,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Tap(\\r\\n        address indexed caller,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event TransferTickets(\\r\\n        address indexed caller,\\r\\n        address indexed beneficiary,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function ticketBooth() external returns (ITicketBooth);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n\\r\\n    function tap() external;\\r\\n\\r\\n    function transferTickets(address _beneficiary, uint256 _amount) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x1af32ed315fc3078a0f4f267a15c4c40e7afe0e419a386971205016543e5fcc7\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyPaymentAddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITicketBooth.sol\\\";\\r\\nimport \\\"./IProxyPaymentAddress.sol\\\";\\r\\n\\r\\ninterface IProxyPaymentAddressManager {\\r\\n\\r\\n    event Deploy(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );       \\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function ticketBooth() external returns (ITicketBooth);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IProxyPaymentAddress[] memory);    \\r\\n\\r\\n    function deploy(uint256 _projectId, string memory _memo) external returns(address);\\r\\n\\r\\n}\",\"keccak256\":\"0x543fa33377ad0ee374989153c95bd96288546affd61f7739aa6a1e1349719645\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport './ITerminalDirectory.sol';\\r\\n\\r\\ninterface ITerminal {\\r\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n\\r\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\r\\n\\r\\n  function pay(\\r\\n    uint256 _projectId,\\r\\n    address _beneficiary,\\r\\n    string calldata _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external payable returns (uint256 fundingCycleId);\\r\\n\\r\\n  function addToBalance(uint256 _projectId) external payable;\\r\\n\\r\\n  function allowMigration(ITerminal _contract) external;\\r\\n\\r\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3936e4ecc9600ca75b996fbc19674f1c2997be5899e77ae9ef240b410a9cb647\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\n\\r\\ninterface ITerminalDirectory {\\r\\n    event DeployAddress(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SetTerminal(\\r\\n        uint256 indexed projectId,\\r\\n        ITerminal indexed terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetPayerPreferences(\\r\\n        address indexed account,\\r\\n        address beneficiary,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\r\\n\\r\\n    function beneficiaryOf(address _account) external returns (address);\\r\\n\\r\\n    function unstakedTicketsPreferenceOf(address _account)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IDirectPaymentAddress[] memory);\\r\\n\\r\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\r\\n\\r\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\r\\n\\r\\n    function setPayerPreferences(\\r\\n        address _beneficiary,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf51c6dfb9b0236446e35701283ffb1c3508546ef9bf0e48933ea52f6b359c68\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./ITickets.sol\\\";\\r\\n\\r\\ninterface ITicketBooth {\\r\\n    event Issue(\\r\\n        uint256 indexed projectId,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        address caller\\r\\n    );\\r\\n    event Print(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        bool convertedTickets,\\r\\n        bool preferUnstakedTickets,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Redeem(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 stakedTickets,\\r\\n        bool preferUnstaked,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Stake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unstake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Lock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unlock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        address indexed recipient,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function lockedBalanceBy(\\r\\n        address _operator,\\r\\n        address _holder,\\r\\n        uint256 _projectId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakedTotalSupplyOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _result);\\r\\n\\r\\n    function issue(\\r\\n        uint256 _projectId,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external;\\r\\n\\r\\n    function print(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n\\r\\n    function redeem(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstaked\\r\\n    ) external;\\r\\n\\r\\n    function stake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function lock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unlock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function transfer(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbb38c02b16bb49b062d3f540a6648f3aea32840b31fb9c70fc97bf2fda281a95\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITickets is IERC20 {\\r\\n    function print(address _account, uint256 _amount) external;\\r\\n\\r\\n    function redeem(address _account, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaec6f741c90690d9c596e897db9d96bc113a63adbfdd5b971aa2abbe3213da32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516115ef3803806115ef83398101604081905261002f9161004d565b6001600160601b0319606092831b8116608052911b1660a05261009f565b6000806040838503121561006057600080fd5b825161006b81610087565b602084015190925061007c81610087565b809150509250929050565b6001600160a01b038116811461009c57600080fd5b50565b60805160601c60a05160601c6115196100d66000396000818160cb0152610231015260008181607f015261021001526115196000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634cbcdc23146100515780636abcf8e31461007a5780639b602d60146100c6578063ffbf2bd8146100ed575b600080fd5b61006461005f3660046103b5565b610100565b6040516100719190610512565b60405180910390f35b6100a17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100a17f000000000000000000000000000000000000000000000000000000000000000081565b6100a16100fb3660046103ce565b610177565b6000818152602081815260409182902080548351818402810184019094528084526060939283018282801561016b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610140575b50505050509050919050565b600080831161020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f50726f78795061796d656e74416464726573734d616e616765723a3a6465706c60448201527f6f793a205a45524f5f50524f4a45435400000000000000000000000000000000606482015260840160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858560405161025e906103a8565b61026b949392919061056c565b604051809103906000f080158015610287573d6000803e3d6000fd5b506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90602401600060405180830381600087803b1580156102f257600080fd5b505af1158015610306573d6000803e3d6000fd5b5050506000858152602081815260408083208054600181018255908452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555133915085907fb24384e68b59e576d1779bfdf48410e953d8c8064ed33288f28b16c7c6f78cf8906103999087906105b5565b60405180910390a39392505050565b610ee5806105ff83390190565b6000602082840312156103c757600080fd5b5035919050565b600080604083850312156103e157600080fd5b82359150602083013567ffffffffffffffff8082111561040057600080fd5b818501915085601f83011261041457600080fd5b813581811115610426576104266105cf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561046c5761046c6105cf565b8160405282815288602084870101111561048557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b818110156104cd576020818501810151868301820152016104b1565b818111156104df576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b8181101561056057835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161052e565b50909695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526105ab60808301846104a7565b9695505050505050565b6020815260006105c860208301846104a7565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60e06040523480156200001157600080fd5b5060405162000ee538038062000ee5833981016040819052620000349162000174565b6200003f336200007e565b6001600160601b0319606085811b821660805284901b1660a05260c0829052805162000073906001906020840190620000ce565b5050505050620002f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000dc9062000286565b90600052602060002090601f0160209004810192826200010057600085556200014b565b82601f106200011b57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014b5782518255916020019190600101906200012e565b50620001599291506200015d565b5090565b5b808211156200015957600081556001016200015e565b600080600080608085870312156200018b57600080fd5b84516200019881620002d9565b80945050602080860151620001ad81620002d9565b6040870151606088015191955093506001600160401b0380821115620001d257600080fd5b818801915088601f830112620001e757600080fd5b815181811115620001fc57620001fc620002c3565b604051601f8201601f19908116603f01168101908382118183101715620002275762000227620002c3565b816040528281528b868487010111156200024057600080fd5b600093505b8284101562000264578484018601518185018701529285019262000245565b82841115620002765760008684830101525b989b979a50959850505050505050565b600181811c908216806200029b57607f821691505b60208210811415620002bd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620002ef57600080fd5b50565b60805160601c60a05160601c60c051610b93620003526000396000818161010f0152818161031c015281816103c4015281816106c10152610796015260008181610211015261036601526000818161017801526106e90152610b936000f3fe60806040526004361061009a5760003560e01c8063715018a6116100695780639b602d601161004e5780639b602d60146101ff578063f2fde38b14610233578063fd2210311461025357600080fd5b8063715018a6146101bf5780638da5cb5b146101d457600080fd5b8063323a9beb146100db5780633fafa127146100fd57806358c3b870146101445780636abcf8e31461016657600080fd5b366100d65760405134815233907fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def39060200160405180910390a2005b600080fd5b3480156100e757600080fd5b506100fb6100f63660046108fd565b610268565b005b34801561010957600080fd5b506101317f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561015057600080fd5b5061015961044e565b60405161013b919061095f565b34801561017257600080fd5b5061019a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013b565b3480156101cb57600080fd5b506100fb6104dc565b3480156101e057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661019a565b34801561020b57600080fd5b5061019a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561023f57600080fd5b506100fb61024e3660046108d9565b610569565b34801561025f57600080fd5b506100fb610699565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517f33681fb10000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff83811660648301527f000000000000000000000000000000000000000000000000000000000000000016906333681fb190608401600060405180830381600087803b1580156103aa57600080fd5b505af11580156103be573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb160bbc4aa5a748ded771f39724cf08e31503f67d71efcb891aea516c01e16138460405161044291815260200190565b60405180910390a45050565b6001805461045b90610ae7565b80601f016020809104026020016040519081016040528092919081815260200182805461048790610ae7565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b6105676000610864565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b73ffffffffffffffffffffffffffffffffffffffff811661068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102e5565b61069681610864565b50565b6040517f4fe0eced0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015247907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634fe0eced9060240160206040518083038186803b15801561074057600080fd5b505afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610929565b73ffffffffffffffffffffffffffffffffffffffff166302c8986f827f000000000000000000000000000000000000000000000000000000000000000030600160006040518663ffffffff1660e01b81526004016107d994939291906109d2565b6020604051808303818588803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061082b9190610946565b5060405181815233907ffc3b98e76f4840b19b2829249e3a6ec2bbac1fb30a799c637102913eb3928a069060200160405180910390a250565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156108eb57600080fd5b81356108f681610b3b565b9392505050565b6000806040838503121561091057600080fd5b823561091b81610b3b565b946020939093013593505050565b60006020828403121561093b57600080fd5b81516108f681610b3b565b60006020828403121561095857600080fd5b5051919050565b600060208083528351808285015260005b8181101561098c57858101830151858201604001528201610970565b8181111561099e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b8481526000602073ffffffffffffffffffffffffffffffffffffffff861681840152608060408401526000855481600182811c915080831680610a1657607f831692505b858310811415610a4d577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b6080880183905260a08801818015610a6c5760018114610a9b57610ac6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861682528782019650610ac6565b60008c81526020902060005b86811015610ac057815484820152908501908901610aa7565b83019750505b50505050861515606087015250909250610ade915050565b95945050505050565b600181811c90821680610afb57607f821691505b60208210811415610b35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461069657600080fdfea2646970667358221220508ac344a99ca8c7ab1036f5224abb5b3993033813f390ed6452d02971dd807864736f6c63430008060033a26469706673582212202e38118462a318b6c7f96646baef9fdb76f784df24d62c9f5ecd9485f62c042064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634cbcdc23146100515780636abcf8e31461007a5780639b602d60146100c6578063ffbf2bd8146100ed575b600080fd5b61006461005f3660046103b5565b610100565b6040516100719190610512565b60405180910390f35b6100a17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100a17f000000000000000000000000000000000000000000000000000000000000000081565b6100a16100fb3660046103ce565b610177565b6000818152602081815260409182902080548351818402810184019094528084526060939283018282801561016b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610140575b50505050509050919050565b600080831161020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f50726f78795061796d656e74416464726573734d616e616765723a3a6465706c60448201527f6f793a205a45524f5f50524f4a45435400000000000000000000000000000000606482015260840160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858560405161025e906103a8565b61026b949392919061056c565b604051809103906000f080158015610287573d6000803e3d6000fd5b506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90602401600060405180830381600087803b1580156102f257600080fd5b505af1158015610306573d6000803e3d6000fd5b5050506000858152602081815260408083208054600181018255908452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555133915085907fb24384e68b59e576d1779bfdf48410e953d8c8064ed33288f28b16c7c6f78cf8906103999087906105b5565b60405180910390a39392505050565b610ee5806105ff83390190565b6000602082840312156103c757600080fd5b5035919050565b600080604083850312156103e157600080fd5b82359150602083013567ffffffffffffffff8082111561040057600080fd5b818501915085601f83011261041457600080fd5b813581811115610426576104266105cf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561046c5761046c6105cf565b8160405282815288602084870101111561048557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b818110156104cd576020818501810151868301820152016104b1565b818111156104df576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b8181101561056057835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161052e565b50909695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526105ab60808301846104a7565b9695505050505050565b6020815260006105c860208301846104a7565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60e06040523480156200001157600080fd5b5060405162000ee538038062000ee5833981016040819052620000349162000174565b6200003f336200007e565b6001600160601b0319606085811b821660805284901b1660a05260c0829052805162000073906001906020840190620000ce565b5050505050620002f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000dc9062000286565b90600052602060002090601f0160209004810192826200010057600085556200014b565b82601f106200011b57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014b5782518255916020019190600101906200012e565b50620001599291506200015d565b5090565b5b808211156200015957600081556001016200015e565b600080600080608085870312156200018b57600080fd5b84516200019881620002d9565b80945050602080860151620001ad81620002d9565b6040870151606088015191955093506001600160401b0380821115620001d257600080fd5b818801915088601f830112620001e757600080fd5b815181811115620001fc57620001fc620002c3565b604051601f8201601f19908116603f01168101908382118183101715620002275762000227620002c3565b816040528281528b868487010111156200024057600080fd5b600093505b8284101562000264578484018601518185018701529285019262000245565b82841115620002765760008684830101525b989b979a50959850505050505050565b600181811c908216806200029b57607f821691505b60208210811415620002bd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620002ef57600080fd5b50565b60805160601c60a05160601c60c051610b93620003526000396000818161010f0152818161031c015281816103c4015281816106c10152610796015260008181610211015261036601526000818161017801526106e90152610b936000f3fe60806040526004361061009a5760003560e01c8063715018a6116100695780639b602d601161004e5780639b602d60146101ff578063f2fde38b14610233578063fd2210311461025357600080fd5b8063715018a6146101bf5780638da5cb5b146101d457600080fd5b8063323a9beb146100db5780633fafa127146100fd57806358c3b870146101445780636abcf8e31461016657600080fd5b366100d65760405134815233907fd6717f327e0cb88b4a97a7f67a453e9258252c34937ccbdd86de7cb840e7def39060200160405180910390a2005b600080fd5b3480156100e757600080fd5b506100fb6100f63660046108fd565b610268565b005b34801561010957600080fd5b506101317f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561015057600080fd5b5061015961044e565b60405161013b919061095f565b34801561017257600080fd5b5061019a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013b565b3480156101cb57600080fd5b506100fb6104dc565b3480156101e057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661019a565b34801561020b57600080fd5b5061019a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561023f57600080fd5b506100fb61024e3660046108d9565b610569565b34801561025f57600080fd5b506100fb610699565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517f33681fb10000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff83811660648301527f000000000000000000000000000000000000000000000000000000000000000016906333681fb190608401600060405180830381600087803b1580156103aa57600080fd5b505af11580156103be573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb160bbc4aa5a748ded771f39724cf08e31503f67d71efcb891aea516c01e16138460405161044291815260200190565b60405180910390a45050565b6001805461045b90610ae7565b80601f016020809104026020016040519081016040528092919081815260200182805461048790610ae7565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b6105676000610864565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b73ffffffffffffffffffffffffffffffffffffffff811661068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102e5565b61069681610864565b50565b6040517f4fe0eced0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015247907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634fe0eced9060240160206040518083038186803b15801561074057600080fd5b505afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610929565b73ffffffffffffffffffffffffffffffffffffffff166302c8986f827f000000000000000000000000000000000000000000000000000000000000000030600160006040518663ffffffff1660e01b81526004016107d994939291906109d2565b6020604051808303818588803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061082b9190610946565b5060405181815233907ffc3b98e76f4840b19b2829249e3a6ec2bbac1fb30a799c637102913eb3928a069060200160405180910390a250565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156108eb57600080fd5b81356108f681610b3b565b9392505050565b6000806040838503121561091057600080fd5b823561091b81610b3b565b946020939093013593505050565b60006020828403121561093b57600080fd5b81516108f681610b3b565b60006020828403121561095857600080fd5b5051919050565b600060208083528351808285015260005b8181101561098c57858101830151858201604001528201610970565b8181111561099e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b8481526000602073ffffffffffffffffffffffffffffffffffffffff861681840152608060408401526000855481600182811c915080831680610a1657607f831692505b858310811415610a4d577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b6080880183905260a08801818015610a6c5760018114610a9b57610ac6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861682528782019650610ac6565b60008c81526020902060005b86811015610ac057815484820152908501908901610aa7565b83019750505b50505050861515606087015250909250610ade915050565b95945050505050565b600181811c90821680610afb57607f821691505b60208210811415610b35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461069657600080fdfea2646970667358221220508ac344a99ca8c7ab1036f5224abb5b3993033813f390ed6452d02971dd807864736f6c63430008060033a26469706673582212202e38118462a318b6c7f96646baef9fdb76f784df24d62c9f5ecd9485f62c042064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addressesOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get proxy payment addresses for."
        },
        "returns": {
          "_0": "A list of proxy payment addresses for the specified project ID."
        }
      },
      "deploy(uint256,string)": {
        "params": {
          "_memo": "Memo that will be attached withdrawal transactions.",
          "_projectId": "ID of the project funds will be fowarded to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressesOf(uint256)": {
        "notice": " A list of all proxy payment addresses for the specified project ID."
      },
      "deploy(uint256,string)": {
        "notice": "Deploys a proxy payment address."
      },
      "terminalDirectory()": {
        "notice": "The directory that will be injected into proxy payment addresses."
      },
      "ticketBooth()": {
        "notice": "The ticket boot that will be injected into proxy payment addresses."
      }
    },
    "notice": "Manages deploying proxy payment addresses for Candybox projects.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8665,
        "contract": "contracts/ProxyPaymentAddressManager.sol:ProxyPaymentAddressManager",
        "label": "_addressesOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_array(t_contract(IProxyPaymentAddress)16942)dyn_storage)"
      }
    ],
    "types": {
      "t_array(t_contract(IProxyPaymentAddress)16942)dyn_storage": {
        "base": "t_contract(IProxyPaymentAddress)16942",
        "encoding": "dynamic_array",
        "label": "contract IProxyPaymentAddress[]",
        "numberOfBytes": "32"
      },
      "t_contract(IProxyPaymentAddress)16942": {
        "encoding": "inplace",
        "label": "contract IProxyPaymentAddress",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_contract(IProxyPaymentAddress)16942)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IProxyPaymentAddress[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IProxyPaymentAddress)16942)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}