{
  "address": "0xa0A2370Ad1D5AD31d30665E3B759be2Ba177211a",
  "abi": [
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reconfigurationDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configured",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum BallotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x96630f3394dca56cc7a9dc56e8908ae1f25a5d658e870d5ef9ac51fc1ec595bc",
  "receipt": {
    "to": null,
    "from": "0xB29b99fF4C471497F884C44C42a690CAacaC12f3",
    "contractAddress": "0xa0A2370Ad1D5AD31d30665E3B759be2Ba177211a",
    "transactionIndex": 171,
    "gasUsed": "137629",
    "logsBloom": "0x
    "blockHash": "0xfb89b73287c204f2cfde49ed69685710b2fa02943672556c53e3267df154758f",
    "transactionHash": "0x96630f3394dca56cc7a9dc56e8908ae1f25a5d658e870d5ef9ac51fc1ec595bc",
    "logs": [],
    "blockNumber": 15476140,
    "cumulativeGasUsed": "22432215",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ccb7a7bd8fb2979a6e849901853bc8b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reconfigurationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configured\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum BallotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"duration()\":{\"details\":\"A ballot should not be considered final until the duration has passed.\",\"returns\":{\"_0\":\"The durection in seconds.\"}},\"state(uint256,uint256)\":{\"params\":{\"_configured\":\"The configuration of the funding cycle to check the state of.\"},\"returns\":{\"_0\":\"The state of the provided ballot.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"duration()\":{\"notice\":\"The time that this ballot is active for.\"},\"reconfigurationDelay()\":{\"notice\":\"The number of seconds that must pass for a funding cycle reconfiguration to become active.\"},\"state(uint256,uint256)\":{\"notice\":\"The approval state of a particular funding cycle.\"}},\"notice\":\"Manages votes towards approving funding cycle reconfigurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Active7DaysFundingCycleBallot.sol\":\"Active7DaysFundingCycleBallot\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Active7DaysFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./interfaces/ITerminalV1.sol\\\";\\r\\nimport \\\"./interfaces/IFundingCycleBallot.sol\\\";\\r\\n\\r\\n/** \\r\\n   @notice Manages votes towards approving funding cycle reconfigurations.\\r\\n */\\r\\ncontract Active7DaysFundingCycleBallot is IFundingCycleBallot {\\r\\n    // --- public stored properties --- //\\r\\n\\r\\n    /// @notice The number of seconds that must pass for a funding cycle reconfiguration to become active.\\r\\n    uint256 public constant reconfigurationDelay = 604800; // 7 days\\r\\n\\r\\n    // --- external views --- //\\r\\n\\r\\n    /** \\r\\n      @notice The time that this ballot is active for.\\r\\n      @dev A ballot should not be considered final until the duration has passed.\\r\\n      @return The durection in seconds.\\r\\n    */\\r\\n    function duration() external pure override returns (uint256) {\\r\\n        return reconfigurationDelay;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      @notice The approval state of a particular funding cycle.\\r\\n      @param _configured The configuration of the funding cycle to check the state of.\\r\\n      @return The state of the provided ballot.\\r\\n   */\\r\\n    function state(uint256, uint256 _configured)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (BallotState)\\r\\n    {\\r\\n        return\\r\\n            block.timestamp > _configured + reconfigurationDelay\\r\\n                ? BallotState.Approved\\r\\n                : BallotState.Active;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4762daa35371ffe756e26f50784149331dadcc0989903c8cae93e6a1972db9c1\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\n\\r\\ninterface IDirectPaymentAddress {\\r\\n    event Forward(\\r\\n        address indexed payer,\\r\\n        uint256 indexed projectId,\\r\\n        address beneficiary,\\r\\n        uint256 value,\\r\\n        string memo,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd06e33fc4ee499a075753fef5254d67e2c5b34a1f59383aff3d39542493076ce\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\nenum BallotState {\\r\\n    Approved,\\r\\n    Active,\\r\\n    Failed,\\r\\n    Standby\\r\\n}\\r\\n\\r\\ninterface IFundingCycleBallot {\\r\\n    function duration() external view returns (uint256);\\r\\n\\r\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n}\\r\\n\",\"keccak256\":\"0x390d880eda3e7c2548b2b3550509b871d3a78d2a9b65082e6e6a2879b679f5f5\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IPrices.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IFundingCycleBallot.sol\\\";\\r\\n\\r\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\r\\nstruct FundingCycle {\\r\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\r\\n    uint256 id;\\r\\n    // The ID of the project contract that this funding cycle belongs to.\\r\\n    uint256 projectId;\\r\\n    // The number of this funding cycle for the project.\\r\\n    uint256 number;\\r\\n    // The ID of a previous funding cycle that this one is based on.\\r\\n    uint256 basedOn;\\r\\n    // The time when this funding cycle was last configured.\\r\\n    uint256 configured;\\r\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\r\\n    uint256 cycleLimit;\\r\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\r\\n    uint256 weight;\\r\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\r\\n    IFundingCycleBallot ballot;\\r\\n    // The time when this funding cycle will become active.\\r\\n    uint256 start;\\r\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\r\\n    uint256 duration;\\r\\n    // The amount that this funding cycle is targeting in terms of the currency.\\r\\n    uint256 target;\\r\\n    // The currency that the target is measured in.\\r\\n    uint256 currency;\\r\\n    // The percentage of each payment to send as a fee to the Candybox admin.\\r\\n    uint256 fee;\\r\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\r\\n    uint256 discountRate;\\r\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\r\\n    uint256 tapped;\\r\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\r\\n    uint256 metadata;\\r\\n}\\r\\n\\r\\nstruct FundingCycleProperties {\\r\\n    uint256 target;\\r\\n    uint256 currency;\\r\\n    uint256 duration;\\r\\n    uint256 cycleLimit;\\r\\n    uint256 discountRate;\\r\\n    IFundingCycleBallot ballot;\\r\\n}\\r\\n\\r\\ninterface IFundingCycles {\\r\\n    event Configure(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 reconfigured,\\r\\n        FundingCycleProperties _properties,\\r\\n        uint256 metadata,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Tap(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 newTappedAmount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Init(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 number,\\r\\n        uint256 previous,\\r\\n        uint256 weight,\\r\\n        uint256 start\\r\\n    );\\r\\n\\r\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function BASE_WEIGHT() external view returns (uint256);\\r\\n\\r\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\r\\n\\r\\n    function get(uint256 _fundingCycleId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function queuedOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentBallotStateOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n\\r\\n    function configure(\\r\\n        uint256 _projectId,\\r\\n        FundingCycleProperties calldata _properties,\\r\\n        uint256 _metadata,\\r\\n        uint256 _fee,\\r\\n        bool _configureActiveFundingCycle\\r\\n    ) external returns (FundingCycle memory fundingCycle);\\r\\n\\r\\n    function tap(uint256 _projectId, uint256 _amount)\\r\\n        external\\r\\n        returns (FundingCycle memory fundingCycle);\\r\\n}\\r\\n\",\"keccak256\":\"0xd44d3fa53e2e3925e134164528fcc3eda30bc8a4b2f97e2aa493cd8401b5e8a0\",\"license\":\"MIT\"},\"contracts/interfaces/IModAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IModAllocator {\\r\\n    event Allocate(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed forProjectId,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function allocate(\\r\\n        uint256 _projectId,\\r\\n        uint256 _forProjectId,\\r\\n        address _beneficiary\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xc1eb226ba764a20efe62a2648fe6665cee3c5f89c74e47b0ac2c412184e92ada\",\"license\":\"MIT\"},\"contracts/interfaces/IModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IModAllocator.sol\\\";\\r\\n\\r\\nstruct PayoutMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n    IModAllocator allocator;\\r\\n    uint56 projectId;\\r\\n}\\r\\n\\r\\nstruct TicketMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n}\\r\\n\\r\\ninterface IModStore {\\r\\n    event SetPayoutMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        PayoutMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetTicketMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        TicketMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (PayoutMod[] memory);\\r\\n\\r\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (TicketMod[] memory);\\r\\n\\r\\n    function setPayoutMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        PayoutMod[] memory _mods\\r\\n    ) external;\\r\\n\\r\\n    function setTicketMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        TicketMod[] memory _mods\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x32030d8e78b72a8a1d4744bf362e7f5268f90f169c41519ef74292f18f02d97b\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOperatorStore {\\r\\n    event SetOperator(\\r\\n        address indexed operator,\\r\\n        address indexed account,\\r\\n        uint256 indexed domain,\\r\\n        uint256[] permissionIndexes,\\r\\n        uint256 packed\\r\\n    );\\r\\n\\r\\n    function permissionsOf(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function hasPermission(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _permissionIndex\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function hasPermissions(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setOperator(\\r\\n        address _operator,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external;\\r\\n\\r\\n    function setOperators(\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _domains,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf36c573b8146fcb6819a957dfc581ba906ccd5e109dfb1e2a8bc686efc2407fa\",\"license\":\"MIT\"},\"contracts/interfaces/IPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IPrices {\\r\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\r\\n\\r\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\r\\n\\r\\n    function targetDecimals() external returns (uint256);\\r\\n\\r\\n    function feedFor(uint256 _currency)\\r\\n        external\\r\\n        returns (AggregatorV3Interface);\\r\\n\\r\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\r\\n\\r\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbd9b30d1e76172d0dce0daca098d2ca8be7088a387c0381aa818187f53f90cb0\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IProjects is IERC721 {\\r\\n    event Create(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed owner,\\r\\n        bytes32 indexed handle,\\r\\n        string uri,\\r\\n        ITerminal terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetHandle(\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\r\\n\\r\\n    event TransferHandle(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed to,\\r\\n        bytes32 indexed handle,\\r\\n        bytes32 newHandle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ClaimHandle(\\r\\n        address indexed account,\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ChallengeHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 challengeExpiry,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event RenewHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 indexed projectId,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\r\\n\\r\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\r\\n\\r\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\r\\n\\r\\n    function transferAddressFor(bytes32 _handle)\\r\\n        external\\r\\n        returns (address receiver);\\r\\n\\r\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\r\\n\\r\\n    function exists(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n    function create(\\r\\n        address _owner,\\r\\n        bytes32 _handle,\\r\\n        string calldata _uri,\\r\\n        ITerminal _terminal\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\r\\n\\r\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\r\\n\\r\\n    function transferHandle(\\r\\n        uint256 _projectId,\\r\\n        address _to,\\r\\n        bytes32 _newHandle\\r\\n    ) external returns (bytes32 _handle);\\r\\n\\r\\n    function claimHandle(\\r\\n        bytes32 _handle,\\r\\n        address _for,\\r\\n        uint256 _projectId\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62f6370a1ee64fb5642159b7049715a59404815de69a26dcfe60e0b40e30ff01\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport './ITerminalDirectory.sol';\\r\\n\\r\\ninterface ITerminal {\\r\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n\\r\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\r\\n\\r\\n  function pay(\\r\\n    uint256 _projectId,\\r\\n    address _beneficiary,\\r\\n    string calldata _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external payable returns (uint256 fundingCycleId);\\r\\n\\r\\n  function addToBalance(uint256 _projectId) external payable;\\r\\n\\r\\n  function allowMigration(ITerminal _contract) external;\\r\\n\\r\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3936e4ecc9600ca75b996fbc19674f1c2997be5899e77ae9ef240b410a9cb647\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\n\\r\\ninterface ITerminalDirectory {\\r\\n    event DeployAddress(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SetTerminal(\\r\\n        uint256 indexed projectId,\\r\\n        ITerminal indexed terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetPayerPreferences(\\r\\n        address indexed account,\\r\\n        address beneficiary,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\r\\n\\r\\n    function beneficiaryOf(address _account) external returns (address);\\r\\n\\r\\n    function unstakedTicketsPreferenceOf(address _account)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IDirectPaymentAddress[] memory);\\r\\n\\r\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\r\\n\\r\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\r\\n\\r\\n    function setPayerPreferences(\\r\\n        address _beneficiary,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf51c6dfb9b0236446e35701283ffb1c3508546ef9bf0e48933ea52f6b359c68\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\n\\r\\nimport './ITicketBooth.sol';\\r\\nimport './IFundingCycles.sol';\\r\\nimport './IYielder.sol';\\r\\nimport './IProjects.sol';\\r\\nimport './IModStore.sol';\\r\\nimport './IPrices.sol';\\r\\nimport './ITerminal.sol';\\r\\nimport './IOperatorStore.sol';\\r\\n\\r\\nstruct FundingCycleMetadata {\\r\\n  uint256 reservedRate;\\r\\n  uint256 bondingCurveRate;\\r\\n  uint256 reconfigurationBondingCurveRate;\\r\\n}\\r\\n\\r\\ninterface ITerminalV1 {\\r\\n  event Pay(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    string note,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event AddToBalance(uint256 indexed projectId, uint256 value, address caller);\\r\\n\\r\\n  event AllowMigration(ITerminal allowed);\\r\\n\\r\\n  event Migrate(uint256 indexed projectId, ITerminal indexed to, uint256 _amount, address caller);\\r\\n\\r\\n  event Configure(uint256 indexed fundingCycleId, uint256 indexed projectId, address caller);\\r\\n\\r\\n  event Tap(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    uint256 netTransferAmount,\\r\\n    uint256 beneficiaryTransferAmount,\\r\\n    uint256 govFeeAmount,\\r\\n    address caller\\r\\n  );\\r\\n  event Redeem(\\r\\n    address indexed holder,\\r\\n    address indexed beneficiary,\\r\\n    uint256 indexed _projectId,\\r\\n    uint256 amount,\\r\\n    uint256 returnAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event PrintReserveTickets(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 count,\\r\\n    uint256 beneficiaryTicketAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event DistributeToPayoutMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    PayoutMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event DistributeToTicketMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    TicketMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event AppointGovernance(address governance);\\r\\n\\r\\n  event AcceptGovernance(address governance);\\r\\n\\r\\n  event PrintPreminedTickets(\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    string memo,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event Deposit(uint256 amount);\\r\\n\\r\\n  event EnsureTargetLocalWei(uint256 target);\\r\\n\\r\\n  event SetYielder(IYielder newYielder);\\r\\n\\r\\n  event SetFee(uint256 _amount);\\r\\n\\r\\n  event SetTargetLocalWei(uint256 amount);\\r\\n\\r\\n  function governance() external view returns (address payable);\\r\\n\\r\\n  function pendingGovernance() external view returns (address payable);\\r\\n\\r\\n  function projects() external view returns (IProjects);\\r\\n\\r\\n  function fundingCycles() external view returns (IFundingCycles);\\r\\n\\r\\n  function ticketBooth() external view returns (ITicketBooth);\\r\\n\\r\\n  function prices() external view returns (IPrices);\\r\\n\\r\\n  function modStore() external view returns (IModStore);\\r\\n\\r\\n  function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function canPrintPreminedTickets(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n  function balanceOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function claimableOverflowOf(\\r\\n    address _account,\\r\\n    uint256 _amount,\\r\\n    uint256 _projectId\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function fee() external view returns (uint256);\\r\\n\\r\\n  function deploy(\\r\\n    address _owner,\\r\\n    bytes32 _handle,\\r\\n    string calldata _uri,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external;\\r\\n\\r\\n  function configure(\\r\\n    uint256 _projectId,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function printPreminedTickets(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    address _beneficiary,\\r\\n    string memory _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external;\\r\\n\\r\\n  function tap(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    uint256 _minReturnedWei\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function redeem(\\r\\n    address _account,\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _minReturnedWei,\\r\\n    address payable _beneficiary,\\r\\n    bool _preferUnstaked\\r\\n  ) external returns (uint256 returnAmount);\\r\\n\\r\\n  function printReservedTickets(uint256 _projectId)\\r\\n    external\\r\\n    returns (uint256 reservedTicketsToPrint);\\r\\n\\r\\n  function setFee(uint256 _fee) external;\\r\\n\\r\\n  function appointGovernance(address payable _pendingGovernance) external;\\r\\n\\r\\n  function acceptGovernance() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1c04cb166a1506d27dab54014bf6923d5908a00c20cc80c375519be3e38f50\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./ITickets.sol\\\";\\r\\n\\r\\ninterface ITicketBooth {\\r\\n    event Issue(\\r\\n        uint256 indexed projectId,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        address caller\\r\\n    );\\r\\n    event Print(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        bool convertedTickets,\\r\\n        bool preferUnstakedTickets,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Redeem(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 stakedTickets,\\r\\n        bool preferUnstaked,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Stake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unstake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Lock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unlock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        address indexed recipient,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function lockedBalanceBy(\\r\\n        address _operator,\\r\\n        address _holder,\\r\\n        uint256 _projectId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakedTotalSupplyOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _result);\\r\\n\\r\\n    function issue(\\r\\n        uint256 _projectId,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external;\\r\\n\\r\\n    function print(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n\\r\\n    function redeem(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstaked\\r\\n    ) external;\\r\\n\\r\\n    function stake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function lock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unlock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function transfer(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbb38c02b16bb49b062d3f540a6648f3aea32840b31fb9c70fc97bf2fda281a95\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITickets is IERC20 {\\r\\n    function print(address _account, uint256 _amount) external;\\r\\n\\r\\n    function redeem(address _account, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaec6f741c90690d9c596e897db9d96bc113a63adbfdd5b971aa2abbe3213da32\",\"license\":\"MIT\"},\"contracts/interfaces/IYielder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\r\\ninterface IYielder {\\r\\n    function deposited() external view returns (uint256);\\r\\n\\r\\n    function getCurrentBalance() external view returns (uint256);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\r\\n\\r\\n    function withdrawAll(address payable _beneficiary)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x252df2bae92a7023ccce3134dc9e616fd5337cecfb025026544a565512ac82d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061018a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806304f49616146100465780630fb5a6b4146100635780634d393dc91461006c575b600080fd5b61005062093a8081565b6040519081526020015b60405180910390f35b62093a80610050565b61007f61007a3660046100b2565b61008c565b60405161005a91906100d4565b600061009b62093a8083610115565b42116100a85760016100ab565b60005b9392505050565b600080604083850312156100c557600080fd5b50508035926020909101359150565b602081016004831061010f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000821982111561014f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea264697066735822122031d07dd4290016df8f174028ef64fd36a74b58d6c57694e1348923b50d023e2d64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806304f49616146100465780630fb5a6b4146100635780634d393dc91461006c575b600080fd5b61005062093a8081565b6040519081526020015b60405180910390f35b62093a80610050565b61007f61007a3660046100b2565b61008c565b60405161005a91906100d4565b600061009b62093a8083610115565b42116100a85760016100ab565b60005b9392505050565b600080604083850312156100c557600080fd5b50508035926020909101359150565b602081016004831061010f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000821982111561014f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea264697066735822122031d07dd4290016df8f174028ef64fd36a74b58d6c57694e1348923b50d023e2d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "duration()": {
        "details": "A ballot should not be considered final until the duration has passed.",
        "returns": {
          "_0": "The durection in seconds."
        }
      },
      "state(uint256,uint256)": {
        "params": {
          "_configured": "The configuration of the funding cycle to check the state of."
        },
        "returns": {
          "_0": "The state of the provided ballot."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "duration()": {
        "notice": "The time that this ballot is active for."
      },
      "reconfigurationDelay()": {
        "notice": "The number of seconds that must pass for a funding cycle reconfiguration to become active."
      },
      "state(uint256,uint256)": {
        "notice": "The approval state of a particular funding cycle."
      }
    },
    "notice": "Manages votes towards approving funding cycle reconfigurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}