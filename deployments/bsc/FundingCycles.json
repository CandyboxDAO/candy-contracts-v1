{
  "address": "0xbb84B712269386B3495dCEb1e81ee505da417e66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reconfigured",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct FundingCycleProperties",
          "name": "_properties",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTappedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Tap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CYCLE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "_properties",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_metadata",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_configureActiveFundingCycle",
          "type": "bool"
        }
      ],
      "name": "configure",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentBallotStateOf",
      "outputs": [
        {
          "internalType": "enum BallotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "queuedOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "contract IFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tapped",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x070ad474c1b5ee34ad5964a59c1154f5de8c747fea7c0c9804469f307bb070e4",
  "receipt": {
    "to": null,
    "from": "0xB29b99fF4C471497F884C44C42a690CAacaC12f3",
    "contractAddress": "0xbb84B712269386B3495dCEb1e81ee505da417e66",
    "transactionIndex": 138,
    "gasUsed": "2297859",
    "logsBloom": "0x
    "blockHash": "0xa046688cd8a726fba5303fb90c66094c9eaafe12cb169882ebe694121fcc86d6",
    "transactionHash": "0x070ad474c1b5ee34ad5964a59c1154f5de8c747fea7c0c9804469f307bb070e4",
    "logs": [],
    "blockNumber": 15476093,
    "cumulativeGasUsed": "14394508",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4d698441EEC2A7f1408679811DfA85fC6B18546"
  ],
  "solcInputHash": "ccb7a7bd8fb2979a6e849901853bc8b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reconfigured\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct FundingCycleProperties\",\"name\":\"_properties\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTappedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Tap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"_properties\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_metadata\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_configureActiveFundingCycle\",\"type\":\"bool\"}],\"name\":\"configure\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentBallotStateOf\",\"outputs\":[{\"internalType\":\"enum BallotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"queuedOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"configure(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256,bool)\":{\"details\":\"Only a project's current terminal can configure its funding cycles._properties.target The amount that the project wants to receive in each funding cycle. 18 decimals._properties.currency The currency of the `_target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This does nothing for a project's first funding cycle._properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 100, a contribution to the next funding cycle will only give you 90% of tickets given to a contribution of the same amount during the current funding cycle. If the number is 200, a contribution to the next funding cycle will only give you 80% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 201, an non-recurring funding cycle will get made._ballot The new ballot that will be used to approve subsequent reconfigurations.\",\"params\":{\"_configureActiveFundingCycle\":\"If a funding cycle that has already started should be configurable.\",\"_fee\":\"The fee that this configuration will incure when tapping.\",\"_metadata\":\"Data to associate with this funding cycle configuration.\",\"_projectId\":\"The ID of the project being reconfigured.\",\"_properties\":\"The funding cycle configuration.\"},\"returns\":{\"fundingCycle\":\"The funding cycle that the configuration will take effect during.\"}},\"constructor\":{\"params\":{\"_terminalDirectory\":\"A directory of a project's current Candybox terminal to receive payments in.\"}},\"currentBallotStateOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to check for a pending reconfiguration.\"},\"returns\":{\"_0\":\"The current ballot's state.\"}},\"currentOf(uint256)\":{\"details\":\" This runs very similar logic to `_tappable`.\",\"params\":{\"_projectId\":\"The ID of the project being looked through.\"},\"returns\":{\"fundingCycle\":\"The current funding cycle.\"}},\"get(uint256)\":{\"params\":{\"_fundingCycleId\":\"The ID of the funding cycle to get.\"},\"returns\":{\"_0\":\"_fundingCycle The funding cycle.\"}},\"queuedOf(uint256)\":{\"details\":\" This runs roughly similar logic to `_configurable`.\",\"params\":{\"_projectId\":\"The ID of the project being looked through.\"},\"returns\":{\"_0\":\"_fundingCycle The queued funding cycle.\"}},\"tap(uint256,uint256)\":{\"details\":\"Only a project's current terminal can tap funds for its funding cycles.\",\"params\":{\"_amount\":\"The amount being tapped.\",\"_projectId\":\"The ID of the project being tapped.\"},\"returns\":{\"fundingCycle\":\"The tapped funding cycle.\"}}},\"stateVariables\":{\"count\":{\"details\":\"Funding cycles have IDs > 0.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"BASE_WEIGHT()\":{\"notice\":\"The weight used for each project's first funding cycle.\"},\"MAX_CYCLE_LIMIT()\":{\"notice\":\"The maximum value that a cycle limit can be set to.\"},\"configure(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256,bool)\":{\"notice\":\" Configures the next eligible funding cycle for the specified project.\"},\"count()\":{\"notice\":\"The total number of funding cycles created, which is used for issuing funding cycle IDs.\"},\"currentBallotStateOf(uint256)\":{\"notice\":\" The currency ballot state of the project.\"},\"currentOf(uint256)\":{\"notice\":\" The funding cycle that is currently active for the specified project.\"},\"get(uint256)\":{\"notice\":\" Get the funding cycle with the given ID.\"},\"latestIdOf(uint256)\":{\"notice\":\"The ID of the latest funding cycle for each project.\"},\"queuedOf(uint256)\":{\"notice\":\" The funding cycle that's next up for a project, and therefor not currently accepting payments.\"},\"tap(uint256,uint256)\":{\"notice\":\" Tap funds from a project's currently tappable funding cycle.\"},\"terminalDirectory()\":{\"notice\":\"The direct deposit terminals.\"}},\"notice\":\"Manage funding cycle configurations, accounting, and scheduling.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundingCycles.sol\":\"FundingCycles\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"contracts/FundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\r\\n\\r\\nimport './interfaces/IFundingCycles.sol';\\r\\nimport './interfaces/IPrices.sol';\\r\\nimport './abstract/TerminalUtility.sol';\\r\\n\\r\\n/** \\r\\n  @notice Manage funding cycle configurations, accounting, and scheduling.\\r\\n*/\\r\\ncontract FundingCycles is TerminalUtility, IFundingCycles {\\r\\n  // --- private stored contants --- //\\r\\n\\r\\n  // The number of seconds in a day.\\r\\n  uint256 private constant SECONDS_IN_DAY = 86400;\\r\\n\\r\\n  // --- private stored properties --- //\\r\\n\\r\\n  // Stores the reconfiguration properties of each funding cycle, packed into one storage slot.\\r\\n  mapping(uint256 => uint256) private _packedConfigurationPropertiesOf;\\r\\n\\r\\n  // Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\\r\\n  mapping(uint256 => uint256) private _packedIntrinsicPropertiesOf;\\r\\n\\r\\n  // Stores the metadata for each funding cycle, packed into one storage slot.\\r\\n  mapping(uint256 => uint256) private _metadataOf;\\r\\n\\r\\n  // Stores the amount that each funding cycle can tap funding cycle.\\r\\n  mapping(uint256 => uint256) private _targetOf;\\r\\n\\r\\n  // Stores the amount that has been tapped within each funding cycle.\\r\\n  mapping(uint256 => uint256) private _tappedOf;\\r\\n\\r\\n  // --- public stored constants --- //\\r\\n\\r\\n  /// @notice The weight used for each project's first funding cycle.\\r\\n  uint256 public constant override BASE_WEIGHT = 1E24;\\r\\n\\r\\n  /// @notice The maximum value that a cycle limit can be set to.\\r\\n  uint256 public constant override MAX_CYCLE_LIMIT = 32;\\r\\n\\r\\n  // --- public stored properties --- //\\r\\n\\r\\n  /// @notice The ID of the latest funding cycle for each project.\\r\\n  mapping(uint256 => uint256) public override latestIdOf;\\r\\n\\r\\n  /// @notice The total number of funding cycles created, which is used for issuing funding cycle IDs.\\r\\n  /// @dev Funding cycles have IDs > 0.\\r\\n  uint256 public override count = 0;\\r\\n\\r\\n  // --- external views --- //\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Get the funding cycle with the given ID.\\r\\n\\r\\n        @param _fundingCycleId The ID of the funding cycle to get.\\r\\n\\r\\n        @return _fundingCycle The funding cycle.\\r\\n    */\\r\\n  function get(uint256 _fundingCycleId) external view override returns (FundingCycle memory) {\\r\\n    // The funding cycle should exist.\\r\\n    require(_fundingCycleId > 0 && _fundingCycleId <= count, 'FundingCycle::get: NOT_FOUND');\\r\\n\\r\\n    return _getStruct(_fundingCycleId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        The funding cycle that's next up for a project, and therefor not currently accepting payments.\\r\\n\\r\\n        @dev \\r\\n        This runs roughly similar logic to `_configurable`.\\r\\n\\r\\n        @param _projectId The ID of the project being looked through.\\r\\n\\r\\n        @return _fundingCycle The queued funding cycle.\\r\\n    */\\r\\n  function queuedOf(uint256 _projectId) external view override returns (FundingCycle memory) {\\r\\n    // The project must have funding cycles.\\r\\n    if (latestIdOf[_projectId] == 0) return _getStruct(0);\\r\\n\\r\\n    // Get a reference to the standby funding cycle.\\r\\n    uint256 _fundingCycleId = _standby(_projectId);\\r\\n\\r\\n    // If it exists, return it.\\r\\n    if (_fundingCycleId > 0) return _getStruct(_fundingCycleId);\\r\\n\\r\\n    // Get a reference to the eligible funding cycle.\\r\\n    _fundingCycleId = _eligible(_projectId);\\r\\n\\r\\n    // If an eligible funding cycle exists...\\r\\n    if (_fundingCycleId > 0) {\\r\\n      // Get the necessary properties for the standby funding cycle.\\r\\n      FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\r\\n\\r\\n      // There's no queued if the current has a duration of 0.\\r\\n      if (_fundingCycle.duration == 0) return _getStruct(0);\\r\\n\\r\\n      // Check to see if the correct ballot is approved for this funding cycle.\\r\\n      // If so, return a funding cycle based on it.\\r\\n      if (_isApproved(_fundingCycle)) return _mockFundingCycleBasedOn(_fundingCycle, false);\\r\\n\\r\\n      // If it hasn't been approved, set the ID to be its base funding cycle, which carries the last approved configuration.\\r\\n      _fundingCycleId = _fundingCycle.basedOn;\\r\\n    } else {\\r\\n      // No upcoming funding cycle found that is eligible to become active,\\r\\n      // so use the ID of the latest active funding cycle, which carries the last approved configuration.\\r\\n      _fundingCycleId = latestIdOf[_projectId];\\r\\n    }\\r\\n\\r\\n    // A funding cycle must exist.\\r\\n    if (_fundingCycleId == 0) return _getStruct(0);\\r\\n\\r\\n    // Return a mock of what its second next up funding cycle would be.\\r\\n    // Use second next because the next would be a mock of the current funding cycle.\\r\\n    return _mockFundingCycleBasedOn(_getStruct(_fundingCycleId), false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        The funding cycle that is currently active for the specified project.\\r\\n\\r\\n        @dev \\r\\n        This runs very similar logic to `_tappable`.\\r\\n\\r\\n        @param _projectId The ID of the project being looked through.\\r\\n\\r\\n        @return fundingCycle The current funding cycle.\\r\\n    */\\r\\n  function currentOf(uint256 _projectId)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (FundingCycle memory fundingCycle)\\r\\n  {\\r\\n    // The project must have funding cycles.\\r\\n    if (latestIdOf[_projectId] == 0) return _getStruct(0);\\r\\n\\r\\n    // Check for an active funding cycle.\\r\\n    uint256 _fundingCycleId = _eligible(_projectId);\\r\\n\\r\\n    // If no active funding cycle is found, check if there is a standby funding cycle.\\r\\n    // If one exists, it will become active one it has been tapped.\\r\\n    if (_fundingCycleId == 0) _fundingCycleId = _standby(_projectId);\\r\\n\\r\\n    // Keep a reference to the eligible funding cycle.\\r\\n    FundingCycle memory _fundingCycle;\\r\\n\\r\\n    // If a standy funding cycle exists...\\r\\n    if (_fundingCycleId > 0) {\\r\\n      // Get the necessary properties for the standby funding cycle.\\r\\n      _fundingCycle = _getStruct(_fundingCycleId);\\r\\n\\r\\n      // Check to see if the correct ballot is approved for this funding cycle, and that it has started.\\r\\n      if (_fundingCycle.start <= block.timestamp && _isApproved(_fundingCycle))\\r\\n        return _fundingCycle;\\r\\n\\r\\n      // If it hasn't been approved, set the ID to be the based funding cycle,\\r\\n      // which carries the last approved configuration.\\r\\n      _fundingCycleId = _fundingCycle.basedOn;\\r\\n    } else {\\r\\n      // No upcoming funding cycle found that is eligible to become active,\\r\\n      // so us the ID of the latest active funding cycle, which carries the last approved configuration.\\r\\n      _fundingCycleId = latestIdOf[_projectId];\\r\\n    }\\r\\n\\r\\n    // The funding cycle cant be 0.\\r\\n    if (_fundingCycleId == 0) return _getStruct(0);\\r\\n\\r\\n    // The funding cycle to base a current one on.\\r\\n    _fundingCycle = _getStruct(_fundingCycleId);\\r\\n\\r\\n    // Return a mock of what the next funding cycle would be like,\\r\\n    // which would become active one it has been tapped.\\r\\n    return _mockFundingCycleBasedOn(_fundingCycle, true);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice \\r\\n      The currency ballot state of the project.\\r\\n\\r\\n      @param _projectId The ID of the project to check for a pending reconfiguration.\\r\\n\\r\\n      @return The current ballot's state.\\r\\n    */\\r\\n  function currentBallotStateOf(uint256 _projectId) external view override returns (BallotState) {\\r\\n    // The project must have funding cycles.\\r\\n    require(latestIdOf[_projectId] > 0, 'FundingCycles::currentBallotStateOf: NOT_FOUND');\\r\\n\\r\\n    // Get a reference to the latest funding cycle ID.\\r\\n    uint256 _fundingCycleId = latestIdOf[_projectId];\\r\\n\\r\\n    // Get the necessary properties for the latest funding cycle.\\r\\n    FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\r\\n\\r\\n    // If the latest funding cycle is the first, or if it has already started, it must be approved.\\r\\n    if (_fundingCycle.basedOn == 0) return BallotState.Standby;\\r\\n\\r\\n    return _ballotState(_fundingCycleId, _fundingCycle.configured, _fundingCycle.basedOn);\\r\\n  }\\r\\n\\r\\n  // --- external transactions --- //\\r\\n\\r\\n  /** \\r\\n      @param _terminalDirectory A directory of a project's current Candybox terminal to receive payments in.\\r\\n    */\\r\\n  constructor(ITerminalDirectory _terminalDirectory) TerminalUtility(_terminalDirectory) {}\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Configures the next eligible funding cycle for the specified project.\\r\\n\\r\\n        @dev\\r\\n        Only a project's current terminal can configure its funding cycles.\\r\\n\\r\\n        @param _projectId The ID of the project being reconfigured.\\r\\n        @param _properties The funding cycle configuration.\\r\\n          @dev _properties.target The amount that the project wants to receive in each funding cycle. 18 decimals.\\r\\n          @dev _properties.currency The currency of the `_target`. Send 0 for ETH or 1 for USD.\\r\\n          @dev _properties.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days. \\r\\n            Set to 0 for no expiry and to be able to reconfigure anytime.\\r\\n          @dev _cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This does nothing for a project's first funding cycle.\\r\\n          @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\r\\n            If it's 0, each funding cycle will have equal weight.\\r\\n            If the number is 100, a contribution to the next funding cycle will only give you 90% of tickets given to a contribution of the same amount during the current funding cycle.\\r\\n            If the number is 200, a contribution to the next funding cycle will only give you 80% of tickets given to a contribution of the same amoutn during the current funding cycle.\\r\\n            If the number is 201, an non-recurring funding cycle will get made.\\r\\n          @dev _ballot The new ballot that will be used to approve subsequent reconfigurations.\\r\\n        @param _metadata Data to associate with this funding cycle configuration.\\r\\n        @param _fee The fee that this configuration will incure when tapping.\\r\\n        @param _configureActiveFundingCycle If a funding cycle that has already started should be configurable.\\r\\n\\r\\n        @return fundingCycle The funding cycle that the configuration will take effect during.\\r\\n    */\\r\\n  function configure(\\r\\n    uint256 _projectId,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    uint256 _metadata,\\r\\n    uint256 _fee,\\r\\n    bool _configureActiveFundingCycle\\r\\n  ) external override onlyTerminal(_projectId) returns (FundingCycle memory fundingCycle) {\\r\\n    // Duration must fit in a uint16.\\r\\n    require(_properties.duration <= type(uint16).max, 'FundingCycles::configure: BAD_DURATION');\\r\\n\\r\\n    // Currency must be less than the limit.\\r\\n    require(_properties.cycleLimit <= MAX_CYCLE_LIMIT, 'FundingCycles::configure: BAD_CYCLE_LIMIT');\\r\\n\\r\\n    // Discount rate token must be less than or equal to 100%.\\r\\n    require(_properties.discountRate <= 201, 'FundingCycles::configure: BAD_DISCOUNT_RATE');\\r\\n\\r\\n    // Currency must fit into a uint8.\\r\\n    require(_properties.currency <= type(uint8).max, 'FundingCycles::configure: BAD_CURRENCY');\\r\\n\\r\\n    // Fee must be less than or equal to 100%.\\r\\n    require(_fee <= 200, 'FundingCycles::configure: BAD_FEE');\\r\\n\\r\\n    // Set the configuration timestamp is now.\\r\\n    uint256 _configured = block.timestamp;\\r\\n\\r\\n    // Gets the ID of the funding cycle to reconfigure.\\r\\n    uint256 _fundingCycleId = _configurable(_projectId, _configured, _configureActiveFundingCycle);\\r\\n\\r\\n    // Store the configuration.\\r\\n    _packAndStoreConfigurationProperties(\\r\\n      _fundingCycleId,\\r\\n      _configured,\\r\\n      _properties.cycleLimit,\\r\\n      _properties.ballot,\\r\\n      _properties.duration,\\r\\n      _properties.currency,\\r\\n      _fee,\\r\\n      _properties.discountRate\\r\\n    );\\r\\n\\r\\n    // Set the target amount.\\r\\n    _targetOf[_fundingCycleId] = _properties.target;\\r\\n\\r\\n    // Set the metadata.\\r\\n    _metadataOf[_fundingCycleId] = _metadata;\\r\\n\\r\\n    emit Configure(_fundingCycleId, _projectId, _configured, _properties, _metadata, msg.sender);\\r\\n\\r\\n    return _getStruct(_fundingCycleId);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice \\r\\n      Tap funds from a project's currently tappable funding cycle.\\r\\n\\r\\n      @dev\\r\\n      Only a project's current terminal can tap funds for its funding cycles.\\r\\n\\r\\n      @param _projectId The ID of the project being tapped.\\r\\n      @param _amount The amount being tapped.\\r\\n\\r\\n      @return fundingCycle The tapped funding cycle.\\r\\n    */\\r\\n  function tap(uint256 _projectId, uint256 _amount)\\r\\n    external\\r\\n    override\\r\\n    onlyTerminal(_projectId)\\r\\n    returns (FundingCycle memory fundingCycle)\\r\\n  {\\r\\n    // Get a reference to the funding cycle being tapped.\\r\\n    uint256 fundingCycleId = _tappable(_projectId);\\r\\n\\r\\n    // Get a reference to how much has already been tapped from this funding cycle.\\r\\n    uint256 _tapped = _tappedOf[fundingCycleId];\\r\\n\\r\\n    // Amount must be within what is still tappable.\\r\\n    require(\\r\\n      _amount <= _targetOf[fundingCycleId] - _tapped,\\r\\n      'FundingCycles::tap: INSUFFICIENT_FUNDS'\\r\\n    );\\r\\n\\r\\n    // The new amount that has been tapped.\\r\\n    uint256 _newTappedAmount = _tapped + _amount;\\r\\n\\r\\n    // Store the new amount.\\r\\n    _tappedOf[fundingCycleId] = _newTappedAmount;\\r\\n\\r\\n    emit Tap(fundingCycleId, _projectId, _amount, _newTappedAmount, msg.sender);\\r\\n\\r\\n    return _getStruct(fundingCycleId);\\r\\n  }\\r\\n\\r\\n  // --- private helper functions --- //\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Returns the configurable funding cycle for this project if it exists, otherwise creates one.\\r\\n\\r\\n        @param _projectId The ID of the project to find a configurable funding cycle for.\\r\\n        @param _configured The time at which the configuration is occuring.\\r\\n        @param _configureActiveFundingCycle If the active funding cycle should be configurable. Otherwise the next funding cycle will be used.\\r\\n\\r\\n        @return fundingCycleId The ID of the configurable funding cycle.\\r\\n    */\\r\\n  function _configurable(\\r\\n    uint256 _projectId,\\r\\n    uint256 _configured,\\r\\n    bool _configureActiveFundingCycle\\r\\n  ) private returns (uint256 fundingCycleId) {\\r\\n    // If there's not yet a funding cycle for the project, return the ID of a newly created one.\\r\\n    if (latestIdOf[_projectId] == 0)\\r\\n      return _init(_projectId, _getStruct(0), block.timestamp, false);\\r\\n\\r\\n    // Get the standby funding cycle's ID.\\r\\n    fundingCycleId = _standby(_projectId);\\r\\n\\r\\n    // If it exists, make sure its updated, then return it.\\r\\n    if (fundingCycleId > 0) {\\r\\n      // Get the funding cycle that the specified one is based on.\\r\\n      FundingCycle memory _baseFundingCycle = _getStruct(_getStruct(fundingCycleId).basedOn);\\r\\n\\r\\n      // The base's ballot must have ended.\\r\\n      _updateFundingCycle(\\r\\n        fundingCycleId,\\r\\n        _baseFundingCycle,\\r\\n        _getTimeAfterBallot(_baseFundingCycle, _configured),\\r\\n        false\\r\\n      );\\r\\n      return fundingCycleId;\\r\\n    }\\r\\n\\r\\n    // Get the active funding cycle's ID.\\r\\n    fundingCycleId = _eligible(_projectId);\\r\\n\\r\\n    // If the ID of an eligible funding cycle exists, it's approved, and active funding cycles are configurable, return it.\\r\\n    if (fundingCycleId > 0) {\\r\\n      if (!_isIdApproved(fundingCycleId)) {\\r\\n        // If it hasn't been approved, set the ID to be the based funding cycle,\\r\\n        // which carries the last approved configuration.\\r\\n        fundingCycleId = _getStruct(fundingCycleId).basedOn;\\r\\n      } else if (_configureActiveFundingCycle) {\\r\\n        return fundingCycleId;\\r\\n      }\\r\\n    } else {\\r\\n      // Get the ID of the latest funding cycle which has the latest reconfiguration.\\r\\n      fundingCycleId = latestIdOf[_projectId];\\r\\n    }\\r\\n\\r\\n    // Determine if the configurable funding cycle can only take effect on or after a certain date.\\r\\n    uint256 _mustStartOnOrAfter;\\r\\n\\r\\n    // Base off of the active funding cycle if it exists.\\r\\n    FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\r\\n\\r\\n    // Make sure the funding cycle is recurring.\\r\\n    require(_fundingCycle.discountRate < 201, 'FundingCycles::_configurable: NON_RECURRING');\\r\\n\\r\\n    if (_configureActiveFundingCycle) {\\r\\n      // If the duration is zero, always go back to the original start.\\r\\n      if (_fundingCycle.duration == 0) {\\r\\n        _mustStartOnOrAfter = _fundingCycle.start;\\r\\n      } else {\\r\\n        // Set to the start time of the current active start time.\\r\\n        uint256 _timeFromStartMultiple = (block.timestamp - _fundingCycle.start) %\\r\\n          (_fundingCycle.duration * SECONDS_IN_DAY);\\r\\n        _mustStartOnOrAfter = block.timestamp - _timeFromStartMultiple;\\r\\n      }\\r\\n    } else {\\r\\n      // The ballot must have ended.\\r\\n      _mustStartOnOrAfter = _getTimeAfterBallot(_fundingCycle, _configured);\\r\\n    }\\r\\n\\r\\n    // Return the newly initialized configurable funding cycle.\\r\\n    fundingCycleId = _init(_projectId, _fundingCycle, _mustStartOnOrAfter, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Returns the funding cycle that can be tapped at the time of the call.\\r\\n\\r\\n        @param _projectId The ID of the project to find a configurable funding cycle for.\\r\\n\\r\\n        @return fundingCycleId The ID of the tappable funding cycle.\\r\\n    */\\r\\n  function _tappable(uint256 _projectId) private returns (uint256 fundingCycleId) {\\r\\n    // Check for the ID of an eligible funding cycle.\\r\\n    fundingCycleId = _eligible(_projectId);\\r\\n\\r\\n    // No eligible funding cycle found, check for the ID of a standby funding cycle.\\r\\n    // If this one exists, it will become eligible one it has started.\\r\\n    if (fundingCycleId == 0) fundingCycleId = _standby(_projectId);\\r\\n\\r\\n    // Keep a reference to the funding cycle eligible for being tappable.\\r\\n    FundingCycle memory _fundingCycle;\\r\\n\\r\\n    // If the ID of an eligible funding cycle exists,\\r\\n    // check to see if it has been approved by the based funding cycle's ballot.\\r\\n    if (fundingCycleId > 0) {\\r\\n      // Get the necessary properties for the funding cycle.\\r\\n      _fundingCycle = _getStruct(fundingCycleId);\\r\\n\\r\\n      // Check to see if the cycle is approved. If so, return it.\\r\\n      if (_fundingCycle.start <= block.timestamp && _isApproved(_fundingCycle))\\r\\n        return fundingCycleId;\\r\\n\\r\\n      // If it hasn't been approved, set the ID to be the base funding cycle,\\r\\n      // which carries the last approved configuration.\\r\\n      fundingCycleId = _fundingCycle.basedOn;\\r\\n    } else {\\r\\n      // No upcoming funding cycle found that is eligible to become active, clone the latest active funding cycle.\\r\\n      // which carries the last approved configuration.\\r\\n      fundingCycleId = latestIdOf[_projectId];\\r\\n    }\\r\\n\\r\\n    // The funding cycle cant be 0.\\r\\n    require(fundingCycleId > 0, 'FundingCycles::_tappable: NOT_FOUND');\\r\\n\\r\\n    // Set the eligible funding cycle.\\r\\n    _fundingCycle = _getStruct(fundingCycleId);\\r\\n\\r\\n    // Funding cycles with a discount rate of 100% are non-recurring.\\r\\n    require(_fundingCycle.discountRate < 201, 'FundingCycles::_tappable: NON_RECURRING');\\r\\n\\r\\n    // The time when the funding cycle immediately after the eligible funding cycle starts.\\r\\n    uint256 _nextImmediateStart = _fundingCycle.start + (_fundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n    // The distance from now until the nearest past multiple of the cycle duration from its start.\\r\\n    // A duration of zero means the reconfiguration can start right away.\\r\\n    uint256 _timeFromImmediateStartMultiple = _fundingCycle.duration == 0\\r\\n      ? 0\\r\\n      : (block.timestamp - _nextImmediateStart) % (_fundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n    // Return the tappable funding cycle.\\r\\n    fundingCycleId = _init(\\r\\n      _projectId,\\r\\n      _fundingCycle,\\r\\n      block.timestamp - _timeFromImmediateStartMultiple,\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Initializes a funding cycle with the appropriate properties.\\r\\n\\r\\n        @param _projectId The ID of the project to which the funding cycle being initialized belongs.\\r\\n        @param _baseFundingCycle The funding cycle to base the initialized one on.\\r\\n        @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\r\\n        @param _copy If non-intrinsic properties should be copied from the base funding cycle.\\r\\n\\r\\n        @return newFundingCycleId The ID of the initialized funding cycle.\\r\\n    */\\r\\n  function _init(\\r\\n    uint256 _projectId,\\r\\n    FundingCycle memory _baseFundingCycle,\\r\\n    uint256 _mustStartOnOrAfter,\\r\\n    bool _copy\\r\\n  ) private returns (uint256 newFundingCycleId) {\\r\\n    // Increment the count of funding cycles.\\r\\n    count++;\\r\\n\\r\\n    // Set the project's latest funding cycle ID to the new count.\\r\\n    latestIdOf[_projectId] = count;\\r\\n\\r\\n    // If there is no base, initialize a first cycle.\\r\\n    if (_baseFundingCycle.id == 0) {\\r\\n      // Set fresh intrinsic properties.\\r\\n      _packAndStoreIntrinsicProperties(count, _projectId, BASE_WEIGHT, 1, 0, block.timestamp);\\r\\n    } else {\\r\\n      // Update the intrinsic properties of the funding cycle being initialized.\\r\\n      _updateFundingCycle(count, _baseFundingCycle, _mustStartOnOrAfter, _copy);\\r\\n    }\\r\\n\\r\\n    // Get a reference to the funding cycle with updated intrinsic properties.\\r\\n    FundingCycle memory _fundingCycle = _getStruct(count);\\r\\n\\r\\n    emit Init(\\r\\n      count,\\r\\n      _fundingCycle.projectId,\\r\\n      _fundingCycle.number,\\r\\n      _fundingCycle.basedOn,\\r\\n      _fundingCycle.weight,\\r\\n      _fundingCycle.start\\r\\n    );\\r\\n\\r\\n    return _fundingCycle.id;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        The project's funding cycle that hasn't yet started, if one exists.\\r\\n\\r\\n        @param _projectId The ID of project to look through.\\r\\n\\r\\n        @return fundingCycleId The ID of the standby funding cycle.\\r\\n    */\\r\\n  function _standby(uint256 _projectId) private view returns (uint256 fundingCycleId) {\\r\\n    // Get a reference to the project's latest funding cycle.\\r\\n    fundingCycleId = latestIdOf[_projectId];\\r\\n\\r\\n    // If there isn't one, theres also no standy funding cycle.\\r\\n    if (fundingCycleId == 0) return 0;\\r\\n\\r\\n    // Get the necessary properties for the latest funding cycle.\\r\\n    FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\r\\n\\r\\n    // There is no upcoming funding cycle if the latest funding cycle has already started.\\r\\n    if (block.timestamp >= _fundingCycle.start) return 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        The project's funding cycle that has started and hasn't yet expired.\\r\\n\\r\\n        @param _projectId The ID of the project to look through.\\r\\n\\r\\n        @return fundingCycleId The ID of the active funding cycle.\\r\\n    */\\r\\n  function _eligible(uint256 _projectId) private view returns (uint256 fundingCycleId) {\\r\\n    // Get a reference to the project's latest funding cycle.\\r\\n    fundingCycleId = latestIdOf[_projectId];\\r\\n\\r\\n    // If the latest funding cycle doesn't exist, return an undefined funding cycle.\\r\\n    if (fundingCycleId == 0) return 0;\\r\\n\\r\\n    // Get the necessary properties for the latest funding cycle.\\r\\n    FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\r\\n\\r\\n    // If the latest is expired, return an undefined funding cycle.\\r\\n    // A duration of 0 can not be expired.\\r\\n    if (\\r\\n      _fundingCycle.duration > 0 &&\\r\\n      block.timestamp >= _fundingCycle.start + (_fundingCycle.duration * SECONDS_IN_DAY)\\r\\n    ) return 0;\\r\\n\\r\\n    // The first funding cycle when running on local can be in the future for some reason.\\r\\n    // This will have no effect in production.\\r\\n    if (_fundingCycle.basedOn == 0 || block.timestamp >= _fundingCycle.start) return fundingCycleId;\\r\\n\\r\\n    // The base cant be expired.\\r\\n    FundingCycle memory _baseFundingCycle = _getStruct(_fundingCycle.basedOn);\\r\\n\\r\\n    // If the current time is past the end of the base, return 0.\\r\\n    // A duration of 0 is always eligible.\\r\\n    if (\\r\\n      _baseFundingCycle.duration > 0 &&\\r\\n      block.timestamp >= _baseFundingCycle.start + (_baseFundingCycle.duration * SECONDS_IN_DAY)\\r\\n    ) return 0;\\r\\n\\r\\n    // Return the funding cycle immediately before the latest.\\r\\n    fundingCycleId = _fundingCycle.basedOn;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n        @notice \\r\\n        A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\\r\\n\\r\\n        @param _baseFundingCycle The funding cycle to make the calculation for.\\r\\n        @param _allowMidCycle Allow the mocked funding cycle to already be mid cycle.\\r\\n\\r\\n        @return The next funding cycle, with an ID set to 0.\\r\\n    */\\r\\n  function _mockFundingCycleBasedOn(FundingCycle memory _baseFundingCycle, bool _allowMidCycle)\\r\\n    internal\\r\\n    view\\r\\n    returns (FundingCycle memory)\\r\\n  {\\r\\n    // Can't mock a non recurring funding cycle.\\r\\n    if (_baseFundingCycle.discountRate == 201) return _getStruct(0);\\r\\n\\r\\n    // If the base has a limit, find the last permanent funding cycle, which is needed to make subsequent calculations.\\r\\n    // Otherwise, the base is already the latest permanent funding cycle.\\r\\n    FundingCycle memory _latestPermanentFundingCycle = _baseFundingCycle.cycleLimit > 0\\r\\n      ? _latestPermanentCycleBefore(_baseFundingCycle)\\r\\n      : _baseFundingCycle;\\r\\n\\r\\n    // The distance of the current time to the start of the next possible funding cycle.\\r\\n    uint256 _timeFromImmediateStartMultiple;\\r\\n\\r\\n    if (_allowMidCycle && _baseFundingCycle.duration > 0) {\\r\\n      // Get the end time of the last cycle.\\r\\n      uint256 _cycleEnd = _baseFundingCycle.start +\\r\\n        (_baseFundingCycle.cycleLimit * _baseFundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n      // If the cycle end time is in the past, the mock should start at a multiple of the last permanent cycle since the cycle ended.\\r\\n      if (_baseFundingCycle.cycleLimit > 0 && _cycleEnd < block.timestamp) {\\r\\n        _timeFromImmediateStartMultiple = _latestPermanentFundingCycle.duration == 0\\r\\n          ? 0\\r\\n          : ((block.timestamp - _cycleEnd) %\\r\\n            (_latestPermanentFundingCycle.duration * SECONDS_IN_DAY));\\r\\n      } else {\\r\\n        _timeFromImmediateStartMultiple = _baseFundingCycle.duration * SECONDS_IN_DAY;\\r\\n      }\\r\\n    } else {\\r\\n      _timeFromImmediateStartMultiple = 0;\\r\\n    }\\r\\n\\r\\n    // Derive what the start time should be.\\r\\n    uint256 _start = _deriveStart(\\r\\n      _baseFundingCycle,\\r\\n      _latestPermanentFundingCycle,\\r\\n      block.timestamp - _timeFromImmediateStartMultiple\\r\\n    );\\r\\n\\r\\n    // Derive what the cycle limit should be.\\r\\n    uint256 _cycleLimit = _deriveCycleLimit(_baseFundingCycle, _start);\\r\\n\\r\\n    // Copy the last permanent funding cycle if the bases' limit is up.\\r\\n    FundingCycle memory _fundingCycleToCopy = _cycleLimit == 0\\r\\n      ? _latestPermanentFundingCycle\\r\\n      : _baseFundingCycle;\\r\\n\\r\\n    return\\r\\n      FundingCycle(\\r\\n        0,\\r\\n        _fundingCycleToCopy.projectId,\\r\\n        _deriveNumber(_baseFundingCycle, _latestPermanentFundingCycle, _start),\\r\\n        _fundingCycleToCopy.id,\\r\\n        _fundingCycleToCopy.configured,\\r\\n        _cycleLimit,\\r\\n        _deriveWeight(_baseFundingCycle, _latestPermanentFundingCycle, _start),\\r\\n        _fundingCycleToCopy.ballot,\\r\\n        _start,\\r\\n        _fundingCycleToCopy.duration,\\r\\n        _fundingCycleToCopy.target,\\r\\n        _fundingCycleToCopy.currency,\\r\\n        _fundingCycleToCopy.fee,\\r\\n        _fundingCycleToCopy.discountRate,\\r\\n        0,\\r\\n        _fundingCycleToCopy.metadata\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice\\r\\n      Updates intrinsic properties for a funding cycle given a base cycle.\\r\\n\\r\\n      @param _fundingCycleId The ID of the funding cycle to make sure is update.\\r\\n      @param _baseFundingCycle The cycle that the one being updated is based on.\\r\\n      @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\r\\n      @param _copy If non-intrinsic properties should be copied from the base funding cycle.\\r\\n    */\\r\\n  function _updateFundingCycle(\\r\\n    uint256 _fundingCycleId,\\r\\n    FundingCycle memory _baseFundingCycle,\\r\\n    uint256 _mustStartOnOrAfter,\\r\\n    bool _copy\\r\\n  ) private {\\r\\n    // Get the latest permanent funding cycle.\\r\\n    FundingCycle memory _latestPermanentFundingCycle = _baseFundingCycle.cycleLimit > 0\\r\\n      ? _latestPermanentCycleBefore(_baseFundingCycle)\\r\\n      : _baseFundingCycle;\\r\\n\\r\\n    // Derive the correct next start time from the base.\\r\\n    uint256 _start = _deriveStart(\\r\\n      _baseFundingCycle,\\r\\n      _latestPermanentFundingCycle,\\r\\n      _mustStartOnOrAfter\\r\\n    );\\r\\n\\r\\n    // Derive the correct weight.\\r\\n    uint256 _weight = _deriveWeight(_baseFundingCycle, _latestPermanentFundingCycle, _start);\\r\\n\\r\\n    // Derive the correct number.\\r\\n    uint256 _number = _deriveNumber(_baseFundingCycle, _latestPermanentFundingCycle, _start);\\r\\n\\r\\n    // Copy if needed.\\r\\n    if (_copy) {\\r\\n      // Derive what the cycle limit should be.\\r\\n      uint256 _cycleLimit = _deriveCycleLimit(_baseFundingCycle, _start);\\r\\n\\r\\n      // Copy the last permanent funding cycle if the bases' limit is up.\\r\\n      FundingCycle memory _fundingCycleToCopy = _cycleLimit == 0\\r\\n        ? _latestPermanentFundingCycle\\r\\n        : _baseFundingCycle;\\r\\n\\r\\n      // Save the configuration efficiently.\\r\\n      _packAndStoreConfigurationProperties(\\r\\n        _fundingCycleId,\\r\\n        _fundingCycleToCopy.configured,\\r\\n        _cycleLimit,\\r\\n        _fundingCycleToCopy.ballot,\\r\\n        _fundingCycleToCopy.duration,\\r\\n        _fundingCycleToCopy.currency,\\r\\n        _fundingCycleToCopy.fee,\\r\\n        _fundingCycleToCopy.discountRate\\r\\n      );\\r\\n\\r\\n      _metadataOf[count] = _metadataOf[_fundingCycleToCopy.id];\\r\\n      _targetOf[count] = _targetOf[_fundingCycleToCopy.id];\\r\\n    }\\r\\n\\r\\n    // Update the intrinsic properties.\\r\\n    _packAndStoreIntrinsicProperties(\\r\\n      _fundingCycleId,\\r\\n      _baseFundingCycle.projectId,\\r\\n      _weight,\\r\\n      _number,\\r\\n      _baseFundingCycle.id,\\r\\n      _start\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n      @notice \\r\\n      Efficiently stores a funding cycle's provided intrinsic properties.\\r\\n\\r\\n      @param _fundingCycleId The ID of the funding cycle to pack and store.\\r\\n      @param _projectId The ID of the project to which the funding cycle belongs.\\r\\n      @param _weight The weight of the funding cycle.\\r\\n      @param _number The number of the funding cycle.\\r\\n      @param _basedOn The ID of the based funding cycle.\\r\\n      @param _start The start time of this funding cycle.\\r\\n\\r\\n     */\\r\\n  function _packAndStoreIntrinsicProperties(\\r\\n    uint256 _fundingCycleId,\\r\\n    uint256 _projectId,\\r\\n    uint256 _weight,\\r\\n    uint256 _number,\\r\\n    uint256 _basedOn,\\r\\n    uint256 _start\\r\\n  ) private {\\r\\n    // weight in bytes 0-79 bytes.\\r\\n    uint256 packed = _weight;\\r\\n    // projectId in bytes 80-135 bytes.\\r\\n    packed |= _projectId << 80;\\r\\n    // basedOn in bytes 136-183 bytes.\\r\\n    packed |= _basedOn << 136;\\r\\n    // start in bytes 184-231 bytes.\\r\\n    packed |= _start << 184;\\r\\n    // number in bytes 232-255 bytes.\\r\\n    packed |= _number << 232;\\r\\n\\r\\n    // Set in storage.\\r\\n    _packedIntrinsicPropertiesOf[_fundingCycleId] = packed;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n      @notice \\r\\n      Efficiently stores a funding cycles provided configuration properties.\\r\\n\\r\\n      @param _fundingCycleId The ID of the funding cycle to pack and store.\\r\\n      @param _configured The timestamp of the configuration.\\r\\n      @param _cycleLimit The number of cycles that this configuration should last for before going back to the last permanent.\\r\\n      @param _ballot The ballot to use for future reconfiguration approvals. \\r\\n      @param _duration The duration of the funding cycle.\\r\\n      @param _currency The currency of the funding cycle.\\r\\n      @param _fee The fee of the funding cycle.\\r\\n      @param _discountRate The discount rate of the based funding cycle.\\r\\n     */\\r\\n  function _packAndStoreConfigurationProperties(\\r\\n    uint256 _fundingCycleId,\\r\\n    uint256 _configured,\\r\\n    uint256 _cycleLimit,\\r\\n    IFundingCycleBallot _ballot,\\r\\n    uint256 _duration,\\r\\n    uint256 _currency,\\r\\n    uint256 _fee,\\r\\n    uint256 _discountRate\\r\\n  ) private {\\r\\n    // ballot in bytes 0-159 bytes.\\r\\n    uint256 packed = uint160(address(_ballot));\\r\\n    // configured in bytes 160-207 bytes.\\r\\n    packed |= _configured << 160;\\r\\n    // duration in bytes 208-223 bytes.\\r\\n    packed |= _duration << 208;\\r\\n    // basedOn in bytes 224-231 bytes.\\r\\n    packed |= _currency << 224;\\r\\n    // fee in bytes 232-239 bytes.\\r\\n    packed |= _fee << 232;\\r\\n    // discountRate in bytes 240-247 bytes.\\r\\n    packed |= _discountRate << 240;\\r\\n    // cycleLimit in bytes 248-255 bytes.\\r\\n    packed |= _cycleLimit << 248;\\r\\n\\r\\n    // Set in storage.\\r\\n    _packedConfigurationPropertiesOf[_fundingCycleId] = packed;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\\r\\n\\r\\n        @param _id The ID of the funding cycle to get a struct of.\\r\\n\\r\\n        @return _fundingCycle The funding cycle struct.\\r\\n    */\\r\\n  function _getStruct(uint256 _id) private view returns (FundingCycle memory _fundingCycle) {\\r\\n    // Return an empty funding cycle if the ID specified is 0.\\r\\n    if (_id == 0) return _fundingCycle;\\r\\n\\r\\n    _fundingCycle.id = _id;\\r\\n\\r\\n    uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_id];\\r\\n\\r\\n    _fundingCycle.weight = uint256(uint80(_packedIntrinsicProperties));\\r\\n    _fundingCycle.projectId = uint256(uint56(_packedIntrinsicProperties >> 80));\\r\\n    _fundingCycle.basedOn = uint256(uint48(_packedIntrinsicProperties >> 136));\\r\\n    _fundingCycle.start = uint256(uint48(_packedIntrinsicProperties >> 184));\\r\\n    _fundingCycle.number = uint256(uint24(_packedIntrinsicProperties >> 232));\\r\\n\\r\\n    uint256 _packedConfigurationProperties = _packedConfigurationPropertiesOf[_id];\\r\\n    _fundingCycle.ballot = IFundingCycleBallot(address(uint160(_packedConfigurationProperties)));\\r\\n    _fundingCycle.configured = uint256(uint48(_packedConfigurationProperties >> 160));\\r\\n    _fundingCycle.duration = uint256(uint16(_packedConfigurationProperties >> 208));\\r\\n    _fundingCycle.currency = uint256(uint8(_packedConfigurationProperties >> 224));\\r\\n    _fundingCycle.fee = uint256(uint8(_packedConfigurationProperties >> 232));\\r\\n    _fundingCycle.discountRate = uint256(uint8(_packedConfigurationProperties >> 240));\\r\\n    _fundingCycle.cycleLimit = uint256(uint8(_packedConfigurationProperties >> 248));\\r\\n    _fundingCycle.target = _targetOf[_id];\\r\\n    _fundingCycle.tapped = _tappedOf[_id];\\r\\n    _fundingCycle.metadata = _metadataOf[_id];\\r\\n  }\\r\\n\\r\\n  /** \\r\\n        @notice \\r\\n        The date that is the nearest multiple of the specified funding cycle's duration from its end.\\r\\n\\r\\n        @param _baseFundingCycle The funding cycle to make the calculation for.\\r\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_baseFundingCycle` to not have a limit.\\r\\n        @param _mustStartOnOrAfter A date that the derived start must be on or come after.\\r\\n\\r\\n        @return start The next start time.\\r\\n    */\\r\\n  function _deriveStart(\\r\\n    FundingCycle memory _baseFundingCycle,\\r\\n    FundingCycle memory _latestPermanentFundingCycle,\\r\\n    uint256 _mustStartOnOrAfter\\r\\n  ) internal pure returns (uint256 start) {\\r\\n    // A subsequent cycle to one with a duration of 0 should start as soon as possible.\\r\\n    if (_baseFundingCycle.duration == 0) return _mustStartOnOrAfter;\\r\\n\\r\\n    // Save a reference to the duration measured in seconds.\\r\\n    uint256 _durationInSeconds = _baseFundingCycle.duration * SECONDS_IN_DAY;\\r\\n\\r\\n    // The time when the funding cycle immediately after the specified funding cycle starts.\\r\\n    uint256 _nextImmediateStart = _baseFundingCycle.start + _durationInSeconds;\\r\\n\\r\\n    // If the next immediate start is now or in the future, return it.\\r\\n    if (_nextImmediateStart >= _mustStartOnOrAfter) return _nextImmediateStart;\\r\\n\\r\\n    uint256 _cycleLimit = _baseFundingCycle.cycleLimit;\\r\\n\\r\\n    uint256 _timeFromImmediateStartMultiple;\\r\\n    // Only use base\\r\\n    if (_mustStartOnOrAfter <= _baseFundingCycle.start + _durationInSeconds * _cycleLimit) {\\r\\n      // Otherwise, use the closest multiple of the duration from the old end.\\r\\n      _timeFromImmediateStartMultiple =\\r\\n        (_mustStartOnOrAfter - _nextImmediateStart) %\\r\\n        _durationInSeconds;\\r\\n    } else {\\r\\n      // If the cycle has ended, make the calculation with the latest permanent funding cycle.\\r\\n      _timeFromImmediateStartMultiple = _latestPermanentFundingCycle.duration == 0\\r\\n        ? 0\\r\\n        : ((_mustStartOnOrAfter - (_baseFundingCycle.start + (_durationInSeconds * _cycleLimit))) %\\r\\n          (_latestPermanentFundingCycle.duration * SECONDS_IN_DAY));\\r\\n\\r\\n      // Use the duration of the permanent funding cycle from here on out.\\r\\n      _durationInSeconds = _latestPermanentFundingCycle.duration * SECONDS_IN_DAY;\\r\\n    }\\r\\n\\r\\n    // Otherwise use an increment of the duration from the most recent start.\\r\\n    start = _mustStartOnOrAfter - _timeFromImmediateStartMultiple;\\r\\n\\r\\n    // Add increments of duration as necessary to satisfy the threshold.\\r\\n    while (_mustStartOnOrAfter > start) start = start + _durationInSeconds;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n        @notice \\r\\n        The accumulated weight change since the specified funding cycle.\\r\\n\\r\\n        @param _baseFundingCycle The funding cycle to make the calculation with.\\r\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_fundingCycle` to not have a limit.\\r\\n        @param _start The start time to derive a weight for.\\r\\n\\r\\n        @return weight The next weight.\\r\\n    */\\r\\n  function _deriveWeight(\\r\\n    FundingCycle memory _baseFundingCycle,\\r\\n    FundingCycle memory _latestPermanentFundingCycle,\\r\\n    uint256 _start\\r\\n  ) internal pure returns (uint256 weight) {\\r\\n    // A subsequent cycle to one with a duration of 0 should have the next possible weight.\\r\\n    if (_baseFundingCycle.duration == 0)\\r\\n      return PRBMath.mulDiv(_baseFundingCycle.weight, 1000 - _baseFundingCycle.discountRate, 1000);\\r\\n\\r\\n    // The difference between the start of the base funding cycle and the proposed start.\\r\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\r\\n\\r\\n    // The number of seconds that the base funding cycle is limited to.\\r\\n    uint256 _limitLength = _baseFundingCycle.cycleLimit == 0 || _baseFundingCycle.basedOn == 0\\r\\n      ? 0\\r\\n      : _baseFundingCycle.cycleLimit * (_baseFundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n    // The weight should be based off the base funding cycle's weight.\\r\\n    weight = _baseFundingCycle.weight;\\r\\n\\r\\n    // If there's no limit or if the limit is greater than the start distance,\\r\\n    // apply the discount rate of the base.\\r\\n    if (_limitLength == 0 || _limitLength > _startDistance) {\\r\\n      // If the discount rate is 0, return the same weight.\\r\\n      if (_baseFundingCycle.discountRate == 0) return weight;\\r\\n\\r\\n      uint256 _discountMultiple = _startDistance / (_baseFundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n      for (uint256 i = 0; i < _discountMultiple; i++) {\\r\\n        // The number of times to apply the discount rate.\\r\\n        // Base the new weight on the specified funding cycle's weight.\\r\\n        weight = PRBMath.mulDiv(weight, 1000 - _baseFundingCycle.discountRate, 1000);\\r\\n      }\\r\\n    } else {\\r\\n      // If the time between the base start at the given start is longer than\\r\\n      // the limit, the discount rate for the limited base has to be applied first,\\r\\n      // and then the discount rate for the last permanent should be applied to\\r\\n      // the remaining distance.\\r\\n\\r\\n      // Use up the limited discount rate up until the limit.\\r\\n      if (_baseFundingCycle.discountRate > 0) {\\r\\n        for (uint256 i = 0; i < _baseFundingCycle.cycleLimit; i++) {\\r\\n          weight = PRBMath.mulDiv(weight, 1000 - _baseFundingCycle.discountRate, 1000);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (_latestPermanentFundingCycle.discountRate > 0) {\\r\\n        // The number of times to apply the latest permanent discount rate.\\r\\n\\r\\n        uint256 _permanentDiscountMultiple = _latestPermanentFundingCycle.duration == 0\\r\\n          ? 0\\r\\n          : (_startDistance - _limitLength) /\\r\\n            (_latestPermanentFundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n        for (uint256 i = 0; i < _permanentDiscountMultiple; i++) {\\r\\n          // base the weight on the result of the previous calculation.\\r\\n          weight = PRBMath.mulDiv(weight, 1000 - _latestPermanentFundingCycle.discountRate, 1000);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** \\r\\n        @notice \\r\\n        The number of the next funding cycle given the specified funding cycle.\\r\\n\\r\\n        @param _baseFundingCycle The funding cycle to make the calculation with.\\r\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_fundingCycle` to not have a limit.\\r\\n        @param _start The start time to derive a number for.\\r\\n\\r\\n        @return number The next number.\\r\\n    */\\r\\n  function _deriveNumber(\\r\\n    FundingCycle memory _baseFundingCycle,\\r\\n    FundingCycle memory _latestPermanentFundingCycle,\\r\\n    uint256 _start\\r\\n  ) internal pure returns (uint256 number) {\\r\\n    // A subsequent cycle to one with a duration of 0 should be the next number.\\r\\n    if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1;\\r\\n\\r\\n    // The difference between the start of the base funding cycle and the proposed start.\\r\\n    uint256 _startDistance = _start - _baseFundingCycle.start;\\r\\n\\r\\n    // The number of seconds that the base funding cycle is limited to.\\r\\n    uint256 _limitLength = _baseFundingCycle.cycleLimit == 0\\r\\n      ? 0\\r\\n      : _baseFundingCycle.cycleLimit * (_baseFundingCycle.duration * SECONDS_IN_DAY);\\r\\n\\r\\n    if (_limitLength == 0 || _limitLength > _startDistance) {\\r\\n      // If there's no limit or if the limit is greater than the start distance,\\r\\n      // get the result by finding the number of base cycles that fit in the start distance.\\r\\n      number =\\r\\n        _baseFundingCycle.number +\\r\\n        (_startDistance / (_baseFundingCycle.duration * SECONDS_IN_DAY));\\r\\n    } else {\\r\\n      // If the time between the base start at the given start is longer than\\r\\n      // the limit, first calculate the number of cycles that passed under the limit,\\r\\n      // and add any cycles that have passed of the latest permanent funding cycle afterwards.\\r\\n\\r\\n      number =\\r\\n        _baseFundingCycle.number +\\r\\n        (_limitLength / (_baseFundingCycle.duration * SECONDS_IN_DAY));\\r\\n\\r\\n      number =\\r\\n        number +\\r\\n        (\\r\\n          _latestPermanentFundingCycle.duration == 0\\r\\n            ? 0\\r\\n            : ((_startDistance - _limitLength) /\\r\\n              (_latestPermanentFundingCycle.duration * SECONDS_IN_DAY))\\r\\n        );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** \\r\\n        @notice \\r\\n        The limited number of times a funding cycle configuration can be active given the specified funding cycle.\\r\\n\\r\\n        @param _fundingCycle The funding cycle to make the calculation with.\\r\\n        @param _start The start time to derive cycles remaining for.\\r\\n\\r\\n        @return start The inclusive nunmber of cycles remaining.\\r\\n    */\\r\\n  function _deriveCycleLimit(FundingCycle memory _fundingCycle, uint256 _start)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint256)\\r\\n  {\\r\\n    if (_fundingCycle.cycleLimit <= 1 || _fundingCycle.duration == 0) return 0;\\r\\n    uint256 _cycles = ((_start - _fundingCycle.start) / (_fundingCycle.duration * SECONDS_IN_DAY));\\r\\n\\r\\n    if (_cycles >= _fundingCycle.cycleLimit) return 0;\\r\\n    return _fundingCycle.cycleLimit - _cycles;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice \\r\\n      Checks to see if the funding cycle of the provided ID is approved according to the correct ballot.\\r\\n\\r\\n      @param _fundingCycleId The ID of the funding cycle to get an approval flag for.\\r\\n\\r\\n      @return The approval flag.\\r\\n    */\\r\\n  function _isIdApproved(uint256 _fundingCycleId) private view returns (bool) {\\r\\n    FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\r\\n    return _isApproved(_fundingCycle);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice \\r\\n      Checks to see if the provided funding cycle is approved according to the correct ballot.\\r\\n\\r\\n      @param _fundingCycle The ID of the funding cycle to get an approval flag for.\\r\\n\\r\\n      @return The approval flag.\\r\\n    */\\r\\n  function _isApproved(FundingCycle memory _fundingCycle) private view returns (bool) {\\r\\n    return\\r\\n      _ballotState(_fundingCycle.id, _fundingCycle.configured, _fundingCycle.basedOn) ==\\r\\n      BallotState.Approved;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n        @notice \\r\\n        A funding cycle configuration's currency status.\\r\\n\\r\\n        @param _id The ID of the funding cycle configuration to check the status of.\\r\\n        @param _configuration The timestamp of when the configuration took place.\\r\\n        @param _ballotFundingCycleId The ID of the funding cycle which is configured with the ballot that should be used.\\r\\n\\r\\n        @return The funding cycle's configuration status.\\r\\n    */\\r\\n  function _ballotState(\\r\\n    uint256 _id,\\r\\n    uint256 _configuration,\\r\\n    uint256 _ballotFundingCycleId\\r\\n  ) private view returns (BallotState) {\\r\\n    // If there is no ballot funding cycle, auto approve.\\r\\n    if (_ballotFundingCycleId == 0) return BallotState.Approved;\\r\\n\\r\\n    // Get the ballot funding cycle.\\r\\n    FundingCycle memory _ballotFundingCycle = _getStruct(_ballotFundingCycleId);\\r\\n\\r\\n    // If the configuration is the same as the ballot's funding cycle,\\r\\n    // the ballot isn't applicable. Auto approve since the ballot funding cycle is approved.\\r\\n    if (_ballotFundingCycle.configured == _configuration) return BallotState.Approved;\\r\\n\\r\\n    // If there is no ballot, the ID is auto approved.\\r\\n    // Otherwise, return the ballot's state.\\r\\n    return\\r\\n      _ballotFundingCycle.ballot == IFundingCycleBallot(address(0))\\r\\n        ? BallotState.Approved\\r\\n        : _ballotFundingCycle.ballot.state(_id, _configuration);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice \\r\\n      Finds the last funding cycle that was permanent in relation to the specified funding cycle.\\r\\n\\r\\n      @dev\\r\\n      Determined what the latest funding cycle with a `cycleLimit` of 0 is, or isn't based on any previous funding cycle.\\r\\n\\r\\n\\r\\n      @param _fundingCycle The funding cycle to find the most recent permanent cycle compared to.\\r\\n\\r\\n      @return fundingCycle The most recent permanent funding cycle.\\r\\n    */\\r\\n  function _latestPermanentCycleBefore(FundingCycle memory _fundingCycle)\\r\\n    private\\r\\n    view\\r\\n    returns (FundingCycle memory fundingCycle)\\r\\n  {\\r\\n    if (_fundingCycle.basedOn == 0) return _fundingCycle;\\r\\n    fundingCycle = _getStruct(_fundingCycle.basedOn);\\r\\n    if (fundingCycle.cycleLimit == 0) return fundingCycle;\\r\\n    return _latestPermanentCycleBefore(fundingCycle);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n      @notice\\r\\n      The time after the ballot of the provided funding cycle has expired.\\r\\n\\r\\n      @dev\\r\\n      If the ballot ends in the past, the current block timestamp will be returned.\\r\\n\\r\\n      @param _fundingCycle The ID funding cycle to make the caluclation the ballot of.\\r\\n      @param _from The time from which the ballot duration should be calculated.\\r\\n\\r\\n      @return The time when the ballot duration ends.\\r\\n    */\\r\\n  function _getTimeAfterBallot(FundingCycle memory _fundingCycle, uint256 _from)\\r\\n    private\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    // The ballot must have ended.\\r\\n    uint256 _ballotExpiration = _fundingCycle.ballot != IFundingCycleBallot(address(0))\\r\\n      ? _from + _fundingCycle.ballot.duration()\\r\\n      : 0;\\r\\n\\r\\n    return block.timestamp > _ballotExpiration ? block.timestamp : _ballotExpiration;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x409c6c195c049911ed52fcb33021490567d5378087a1f652137dbbdfa58c4b05\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./../interfaces/ITerminalUtility.sol\\\";\\r\\n\\r\\nabstract contract TerminalUtility is ITerminalUtility {\\r\\n    modifier onlyTerminal(uint256 _projectId) {\\r\\n        require(\\r\\n            address(terminalDirectory.terminalOf(_projectId)) == msg.sender,\\r\\n            \\\"TerminalUtility: UNAUTHORIZED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice The direct deposit terminals.\\r\\n    ITerminalDirectory public immutable override terminalDirectory;\\r\\n\\r\\n    /** \\r\\n      @param _terminalDirectory A directory of a project's current Candybox terminal to receive payments in.\\r\\n    */\\r\\n    constructor(ITerminalDirectory _terminalDirectory) {\\r\\n        terminalDirectory = _terminalDirectory;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x20550604bdda05cd19ba83e1be4dae1f9d7c3ab96e5828564c94e226a9f0236b\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\n\\r\\ninterface IDirectPaymentAddress {\\r\\n    event Forward(\\r\\n        address indexed payer,\\r\\n        uint256 indexed projectId,\\r\\n        address beneficiary,\\r\\n        uint256 value,\\r\\n        string memo,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function terminalDirectory() external returns (ITerminalDirectory);\\r\\n\\r\\n    function projectId() external returns (uint256);\\r\\n\\r\\n    function memo() external returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd06e33fc4ee499a075753fef5254d67e2c5b34a1f59383aff3d39542493076ce\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\nenum BallotState {\\r\\n    Approved,\\r\\n    Active,\\r\\n    Failed,\\r\\n    Standby\\r\\n}\\r\\n\\r\\ninterface IFundingCycleBallot {\\r\\n    function duration() external view returns (uint256);\\r\\n\\r\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n}\\r\\n\",\"keccak256\":\"0x390d880eda3e7c2548b2b3550509b871d3a78d2a9b65082e6e6a2879b679f5f5\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IPrices.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IFundingCycleBallot.sol\\\";\\r\\n\\r\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\r\\nstruct FundingCycle {\\r\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\r\\n    uint256 id;\\r\\n    // The ID of the project contract that this funding cycle belongs to.\\r\\n    uint256 projectId;\\r\\n    // The number of this funding cycle for the project.\\r\\n    uint256 number;\\r\\n    // The ID of a previous funding cycle that this one is based on.\\r\\n    uint256 basedOn;\\r\\n    // The time when this funding cycle was last configured.\\r\\n    uint256 configured;\\r\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\r\\n    uint256 cycleLimit;\\r\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\r\\n    uint256 weight;\\r\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\r\\n    IFundingCycleBallot ballot;\\r\\n    // The time when this funding cycle will become active.\\r\\n    uint256 start;\\r\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\r\\n    uint256 duration;\\r\\n    // The amount that this funding cycle is targeting in terms of the currency.\\r\\n    uint256 target;\\r\\n    // The currency that the target is measured in.\\r\\n    uint256 currency;\\r\\n    // The percentage of each payment to send as a fee to the Candybox admin.\\r\\n    uint256 fee;\\r\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\r\\n    uint256 discountRate;\\r\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\r\\n    uint256 tapped;\\r\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\r\\n    uint256 metadata;\\r\\n}\\r\\n\\r\\nstruct FundingCycleProperties {\\r\\n    uint256 target;\\r\\n    uint256 currency;\\r\\n    uint256 duration;\\r\\n    uint256 cycleLimit;\\r\\n    uint256 discountRate;\\r\\n    IFundingCycleBallot ballot;\\r\\n}\\r\\n\\r\\ninterface IFundingCycles {\\r\\n    event Configure(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 reconfigured,\\r\\n        FundingCycleProperties _properties,\\r\\n        uint256 metadata,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Tap(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 newTappedAmount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Init(\\r\\n        uint256 indexed fundingCycleId,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 number,\\r\\n        uint256 previous,\\r\\n        uint256 weight,\\r\\n        uint256 start\\r\\n    );\\r\\n\\r\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function BASE_WEIGHT() external view returns (uint256);\\r\\n\\r\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\r\\n\\r\\n    function get(uint256 _fundingCycleId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function queuedOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (FundingCycle memory);\\r\\n\\r\\n    function currentBallotStateOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (BallotState);\\r\\n\\r\\n    function configure(\\r\\n        uint256 _projectId,\\r\\n        FundingCycleProperties calldata _properties,\\r\\n        uint256 _metadata,\\r\\n        uint256 _fee,\\r\\n        bool _configureActiveFundingCycle\\r\\n    ) external returns (FundingCycle memory fundingCycle);\\r\\n\\r\\n    function tap(uint256 _projectId, uint256 _amount)\\r\\n        external\\r\\n        returns (FundingCycle memory fundingCycle);\\r\\n}\\r\\n\",\"keccak256\":\"0xd44d3fa53e2e3925e134164528fcc3eda30bc8a4b2f97e2aa493cd8401b5e8a0\",\"license\":\"MIT\"},\"contracts/interfaces/IModAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IModAllocator {\\r\\n    event Allocate(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed forProjectId,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function allocate(\\r\\n        uint256 _projectId,\\r\\n        uint256 _forProjectId,\\r\\n        address _beneficiary\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xc1eb226ba764a20efe62a2648fe6665cee3c5f89c74e47b0ac2c412184e92ada\",\"license\":\"MIT\"},\"contracts/interfaces/IModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IModAllocator.sol\\\";\\r\\n\\r\\nstruct PayoutMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n    IModAllocator allocator;\\r\\n    uint56 projectId;\\r\\n}\\r\\n\\r\\nstruct TicketMod {\\r\\n    bool preferUnstaked;\\r\\n    uint16 percent;\\r\\n    uint48 lockedUntil;\\r\\n    address payable beneficiary;\\r\\n}\\r\\n\\r\\ninterface IModStore {\\r\\n    event SetPayoutMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        PayoutMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetTicketMod(\\r\\n        uint256 indexed projectId,\\r\\n        uint256 indexed configuration,\\r\\n        TicketMod mods,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (PayoutMod[] memory);\\r\\n\\r\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\r\\n        external\\r\\n        view\\r\\n        returns (TicketMod[] memory);\\r\\n\\r\\n    function setPayoutMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        PayoutMod[] memory _mods\\r\\n    ) external;\\r\\n\\r\\n    function setTicketMods(\\r\\n        uint256 _projectId,\\r\\n        uint256 _configuration,\\r\\n        TicketMod[] memory _mods\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x32030d8e78b72a8a1d4744bf362e7f5268f90f169c41519ef74292f18f02d97b\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOperatorStore {\\r\\n    event SetOperator(\\r\\n        address indexed operator,\\r\\n        address indexed account,\\r\\n        uint256 indexed domain,\\r\\n        uint256[] permissionIndexes,\\r\\n        uint256 packed\\r\\n    );\\r\\n\\r\\n    function permissionsOf(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function hasPermission(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256 _permissionIndex\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function hasPermissions(\\r\\n        address _operator,\\r\\n        address _account,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setOperator(\\r\\n        address _operator,\\r\\n        uint256 _domain,\\r\\n        uint256[] calldata _permissionIndexes\\r\\n    ) external;\\r\\n\\r\\n    function setOperators(\\r\\n        address[] calldata _operators,\\r\\n        uint256[] calldata _domains,\\r\\n        uint256[][] calldata _permissionIndexes\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf36c573b8146fcb6819a957dfc581ba906ccd5e109dfb1e2a8bc686efc2407fa\",\"license\":\"MIT\"},\"contracts/interfaces/IPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IPrices {\\r\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\r\\n\\r\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\r\\n\\r\\n    function targetDecimals() external returns (uint256);\\r\\n\\r\\n    function feedFor(uint256 _currency)\\r\\n        external\\r\\n        returns (AggregatorV3Interface);\\r\\n\\r\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\r\\n\\r\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbd9b30d1e76172d0dce0daca098d2ca8be7088a387c0381aa818187f53f90cb0\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\n\\r\\ninterface IProjects is IERC721 {\\r\\n    event Create(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed owner,\\r\\n        bytes32 indexed handle,\\r\\n        string uri,\\r\\n        ITerminal terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetHandle(\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\r\\n\\r\\n    event TransferHandle(\\r\\n        uint256 indexed projectId,\\r\\n        address indexed to,\\r\\n        bytes32 indexed handle,\\r\\n        bytes32 newHandle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ClaimHandle(\\r\\n        address indexed account,\\r\\n        uint256 indexed projectId,\\r\\n        bytes32 indexed handle,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event ChallengeHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 challengeExpiry,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event RenewHandle(\\r\\n        bytes32 indexed handle,\\r\\n        uint256 indexed projectId,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\r\\n\\r\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\r\\n\\r\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\r\\n\\r\\n    function transferAddressFor(bytes32 _handle)\\r\\n        external\\r\\n        returns (address receiver);\\r\\n\\r\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\r\\n\\r\\n    function exists(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n    function create(\\r\\n        address _owner,\\r\\n        bytes32 _handle,\\r\\n        string calldata _uri,\\r\\n        ITerminal _terminal\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\r\\n\\r\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\r\\n\\r\\n    function transferHandle(\\r\\n        uint256 _projectId,\\r\\n        address _to,\\r\\n        bytes32 _newHandle\\r\\n    ) external returns (bytes32 _handle);\\r\\n\\r\\n    function claimHandle(\\r\\n        bytes32 _handle,\\r\\n        address _for,\\r\\n        uint256 _projectId\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x62f6370a1ee64fb5642159b7049715a59404815de69a26dcfe60e0b40e30ff01\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport './ITerminalDirectory.sol';\\r\\n\\r\\ninterface ITerminal {\\r\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n\\r\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\r\\n\\r\\n  function pay(\\r\\n    uint256 _projectId,\\r\\n    address _beneficiary,\\r\\n    string calldata _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external payable returns (uint256 fundingCycleId);\\r\\n\\r\\n  function addToBalance(uint256 _projectId) external payable;\\r\\n\\r\\n  function allowMigration(ITerminal _contract) external;\\r\\n\\r\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3936e4ecc9600ca75b996fbc19674f1c2997be5899e77ae9ef240b410a9cb647\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\r\\nimport \\\"./ITerminal.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IProjects.sol\\\";\\r\\n\\r\\ninterface ITerminalDirectory {\\r\\n    event DeployAddress(\\r\\n        uint256 indexed projectId,\\r\\n        string memo,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SetTerminal(\\r\\n        uint256 indexed projectId,\\r\\n        ITerminal indexed terminal,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event SetPayerPreferences(\\r\\n        address indexed account,\\r\\n        address beneficiary,\\r\\n        bool preferUnstakedTickets\\r\\n    );\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\r\\n\\r\\n    function beneficiaryOf(address _account) external returns (address);\\r\\n\\r\\n    function unstakedTicketsPreferenceOf(address _account)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function addressesOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (IDirectPaymentAddress[] memory);\\r\\n\\r\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\r\\n\\r\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\r\\n\\r\\n    function setPayerPreferences(\\r\\n        address _beneficiary,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf51c6dfb9b0236446e35701283ffb1c3508546ef9bf0e48933ea52f6b359c68\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ITerminalDirectory.sol\\\";\\r\\n\\r\\ninterface ITerminalUtility {\\r\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5b4373f06d534bacb6d710f863935f4c33f95b1d5b1eef11c21a0c06e2610bf0\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\n\\r\\nimport './ITicketBooth.sol';\\r\\nimport './IFundingCycles.sol';\\r\\nimport './IYielder.sol';\\r\\nimport './IProjects.sol';\\r\\nimport './IModStore.sol';\\r\\nimport './IPrices.sol';\\r\\nimport './ITerminal.sol';\\r\\nimport './IOperatorStore.sol';\\r\\n\\r\\nstruct FundingCycleMetadata {\\r\\n  uint256 reservedRate;\\r\\n  uint256 bondingCurveRate;\\r\\n  uint256 reconfigurationBondingCurveRate;\\r\\n}\\r\\n\\r\\ninterface ITerminalV1 {\\r\\n  event Pay(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    string note,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event AddToBalance(uint256 indexed projectId, uint256 value, address caller);\\r\\n\\r\\n  event AllowMigration(ITerminal allowed);\\r\\n\\r\\n  event Migrate(uint256 indexed projectId, ITerminal indexed to, uint256 _amount, address caller);\\r\\n\\r\\n  event Configure(uint256 indexed fundingCycleId, uint256 indexed projectId, address caller);\\r\\n\\r\\n  event Tap(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    uint256 netTransferAmount,\\r\\n    uint256 beneficiaryTransferAmount,\\r\\n    uint256 govFeeAmount,\\r\\n    address caller\\r\\n  );\\r\\n  event Redeem(\\r\\n    address indexed holder,\\r\\n    address indexed beneficiary,\\r\\n    uint256 indexed _projectId,\\r\\n    uint256 amount,\\r\\n    uint256 returnAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event PrintReserveTickets(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 count,\\r\\n    uint256 beneficiaryTicketAmount,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event DistributeToPayoutMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    PayoutMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event DistributeToTicketMod(\\r\\n    uint256 indexed fundingCycleId,\\r\\n    uint256 indexed projectId,\\r\\n    TicketMod mod,\\r\\n    uint256 modCut,\\r\\n    address caller\\r\\n  );\\r\\n  event AppointGovernance(address governance);\\r\\n\\r\\n  event AcceptGovernance(address governance);\\r\\n\\r\\n  event PrintPreminedTickets(\\r\\n    uint256 indexed projectId,\\r\\n    address indexed beneficiary,\\r\\n    uint256 amount,\\r\\n    uint256 currency,\\r\\n    string memo,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  event Deposit(uint256 amount);\\r\\n\\r\\n  event EnsureTargetLocalWei(uint256 target);\\r\\n\\r\\n  event SetYielder(IYielder newYielder);\\r\\n\\r\\n  event SetFee(uint256 _amount);\\r\\n\\r\\n  event SetTargetLocalWei(uint256 amount);\\r\\n\\r\\n  function governance() external view returns (address payable);\\r\\n\\r\\n  function pendingGovernance() external view returns (address payable);\\r\\n\\r\\n  function projects() external view returns (IProjects);\\r\\n\\r\\n  function fundingCycles() external view returns (IFundingCycles);\\r\\n\\r\\n  function ticketBooth() external view returns (ITicketBooth);\\r\\n\\r\\n  function prices() external view returns (IPrices);\\r\\n\\r\\n  function modStore() external view returns (IModStore);\\r\\n\\r\\n  function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function canPrintPreminedTickets(uint256 _projectId) external view returns (bool);\\r\\n\\r\\n  function balanceOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n  function claimableOverflowOf(\\r\\n    address _account,\\r\\n    uint256 _amount,\\r\\n    uint256 _projectId\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function fee() external view returns (uint256);\\r\\n\\r\\n  function deploy(\\r\\n    address _owner,\\r\\n    bytes32 _handle,\\r\\n    string calldata _uri,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external;\\r\\n\\r\\n  function configure(\\r\\n    uint256 _projectId,\\r\\n    FundingCycleProperties calldata _properties,\\r\\n    FundingCycleMetadata calldata _metadata,\\r\\n    PayoutMod[] memory _payoutMods,\\r\\n    TicketMod[] memory _ticketMods\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function printPreminedTickets(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    address _beneficiary,\\r\\n    string memory _memo,\\r\\n    bool _preferUnstakedTickets\\r\\n  ) external;\\r\\n\\r\\n  function tap(\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _currency,\\r\\n    uint256 _minReturnedWei\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function redeem(\\r\\n    address _account,\\r\\n    uint256 _projectId,\\r\\n    uint256 _amount,\\r\\n    uint256 _minReturnedWei,\\r\\n    address payable _beneficiary,\\r\\n    bool _preferUnstaked\\r\\n  ) external returns (uint256 returnAmount);\\r\\n\\r\\n  function printReservedTickets(uint256 _projectId)\\r\\n    external\\r\\n    returns (uint256 reservedTicketsToPrint);\\r\\n\\r\\n  function setFee(uint256 _fee) external;\\r\\n\\r\\n  function appointGovernance(address payable _pendingGovernance) external;\\r\\n\\r\\n  function acceptGovernance() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1c04cb166a1506d27dab54014bf6923d5908a00c20cc80c375519be3e38f50\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./IProjects.sol\\\";\\r\\nimport \\\"./IOperatorStore.sol\\\";\\r\\nimport \\\"./ITickets.sol\\\";\\r\\n\\r\\ninterface ITicketBooth {\\r\\n    event Issue(\\r\\n        uint256 indexed projectId,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        address caller\\r\\n    );\\r\\n    event Print(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        bool convertedTickets,\\r\\n        bool preferUnstakedTickets,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Redeem(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        uint256 stakedTickets,\\r\\n        bool preferUnstaked,\\r\\n        address controller\\r\\n    );\\r\\n\\r\\n    event Stake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unstake(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Lock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Unlock(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed holder,\\r\\n        uint256 indexed projectId,\\r\\n        address indexed recipient,\\r\\n        uint256 amount,\\r\\n        address caller\\r\\n    );\\r\\n\\r\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\r\\n\\r\\n    function projects() external view returns (IProjects);\\r\\n\\r\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function lockedBalanceBy(\\r\\n        address _operator,\\r\\n        address _holder,\\r\\n        uint256 _projectId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakedTotalSupplyOf(uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _holder, uint256 _projectId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _result);\\r\\n\\r\\n    function issue(\\r\\n        uint256 _projectId,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external;\\r\\n\\r\\n    function print(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstakedTickets\\r\\n    ) external;\\r\\n\\r\\n    function redeem(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        bool _preferUnstaked\\r\\n    ) external;\\r\\n\\r\\n    function stake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function lock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unlock(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function transfer(\\r\\n        address _holder,\\r\\n        uint256 _projectId,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbb38c02b16bb49b062d3f540a6648f3aea32840b31fb9c70fc97bf2fda281a95\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITickets is IERC20 {\\r\\n    function print(address _account, uint256 _amount) external;\\r\\n\\r\\n    function redeem(address _account, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaec6f741c90690d9c596e897db9d96bc113a63adbfdd5b971aa2abbe3213da32\",\"license\":\"MIT\"},\"contracts/interfaces/IYielder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./ITerminalV1.sol\\\";\\r\\n\\r\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\r\\ninterface IYielder {\\r\\n    function deposited() external view returns (uint256);\\r\\n\\r\\n    function getCurrentBalance() external view returns (uint256);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\r\\n\\r\\n    function withdrawAll(address payable _beneficiary)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x252df2bae92a7023ccce3134dc9e616fd5337cecfb025026544a565512ac82d0\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x60a060405260006006553480156200001657600080fd5b50604051620029623803806200296283398101604081905262000039916200004f565b60601b6001600160601b03191660805262000081565b6000602082840312156200006257600080fd5b81516001600160a01b03811681146200007a57600080fd5b9392505050565b60805160601c6128b4620000ae60003960008181610135015281816102d9015261090d01526128b46000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638a1b0eb411610081578063cdce9b2b1161005b578063cdce9b2b146101c2578063d614edc5146101e2578063e16fd0ec146101ea57600080fd5b80638a1b0eb41461017c5780639507d39a1461018f578063c55f571c146101a257600080fd5b806343a266c2116100b257806343a266c21461010a5780635c5500781461011d5780636abcf8e31461013057600080fd5b806306661abd146100ce5780631ee2c9bf146100ea575b600080fd5b6100d760065481565b6040519081526020015b60405180910390f35b6100fd6100f836600461254c565b6101fb565b6040516100e191906125af565b6100fd610118366004612494565b6104de565b6100fd61012b366004612494565b6106cc565b6101577f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b6100fd61018a3660046124c6565b61082f565b6100fd61019d366004612494565b610d52565b6101b56101b0366004612494565b610e4f565b6040516100e1919061256e565b6100d76101d0366004612494565b60056020526000908152604090205481565b6100d7602081565b6100d769d3c21bcecceda100000081565b61029160405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517f4fe0eced000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801561031b57600080fd5b505afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103539190612456565b73ffffffffffffffffffffffffffffffffffffffff16146103bb5760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064015b60405180910390fd5b60006103c685610f15565b600081815260046020908152604080832054600390925290912054919250906103f0908290612768565b8511156104655760405162461bcd60e51b815260206004820152602660248201527f46756e64696e674379636c65733a3a7461703a20494e53554646494349454e5460448201527f5f46554e4453000000000000000000000000000000000000000000000000000060648201526084016103b2565b600061047186836126ff565b600084815260046020908152604091829020839055815189815290810183905233818301529051919250889185917fb16453f203e70875883e4ba9c674627ad465d6eb3102bbcad8aa467c0da75fd8919081900360600190a36104d3836111a0565b979650505050505050565b61057460405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000828152600560205260409020546105975761059160006111a0565b92915050565b60006105a283611351565b9050806105b5576105b283611444565b90505b61064b60405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b811561068d5761065a826111a0565b90504281610100015111158015610675575061067581611488565b15610681579392505050565b8060600151915061069f565b60008481526005602052604090205491505b816106b6576106ae60006111a0565b949350505050565b6106bf826111a0565b90506106ae8160016114ba565b61076260405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008281526005602052604090205461077f5761059160006111a0565b600061078a83611444565b905080156107a25761079b816111a0565b9392505050565b6107ab83611351565b905080156107fc5760006107be826111a0565b9050806101200151600014156107d8576106ae60006111a0565b6107e181611488565b156107f1576106ae8160006114ba565b60600151905061080d565b506000828152600560205260409020545b8061081c5761079b60006111a0565b61079b610828826111a0565b60006114ba565b6108c560405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517f4fe0eced000000000000000000000000000000000000000000000000000000008152600481018790528690339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190612456565b73ffffffffffffffffffffffffffffffffffffffff16146109ea5760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016103b2565b61ffff60408701351115610a665760405162461bcd60e51b815260206004820152602660248201527f46756e64696e674379636c65733a3a636f6e6669677572653a204241445f445560448201527f524154494f4e000000000000000000000000000000000000000000000000000060648201526084016103b2565b602086606001351115610ae15760405162461bcd60e51b815260206004820152602960248201527f46756e64696e674379636c65733a3a636f6e6669677572653a204241445f435960448201527f434c455f4c494d4954000000000000000000000000000000000000000000000060648201526084016103b2565b60c986608001351115610b5c5760405162461bcd60e51b815260206004820152602b60248201527f46756e64696e674379636c65733a3a636f6e6669677572653a204241445f444960448201527f53434f554e545f5241544500000000000000000000000000000000000000000060648201526084016103b2565b60ff60208701351115610bd75760405162461bcd60e51b815260206004820152602660248201527f46756e64696e674379636c65733a3a636f6e6669677572653a204241445f435560448201527f5252454e4359000000000000000000000000000000000000000000000000000060648201526084016103b2565b60c8841115610c4e5760405162461bcd60e51b815260206004820152602160248201527f46756e64696e674379636c65733a3a636f6e6669677572653a204241445f464560448201527f450000000000000000000000000000000000000000000000000000000000000060648201526084016103b2565b426000610c5c89838761175e565b9050610cdb818360608b0135610c7860c08d0160a08e01612439565b6000938452602084815260409485902073ffffffffffffffffffffffffffffffffffffffff9290921660a09490941b93909317938d013560d01b93909317918c013560e01b9190911760e88a901b1760808c013560f01b1760f89190911b179055565b60008181526003602090815260408083208b35905560029091529081902088905551899082907f738f28809aeff63352b71b8dc894c5e51b2758e1ff1d6b00b50f8dc10916000890610d349086908d908d90339061267f565b60405180910390a3610d45816111a0565b9998505050505050505050565b610de860405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082118015610dfa57506006548211155b610e465760405162461bcd60e51b815260206004820152601c60248201527f46756e64696e674379636c653a3a6765743a204e4f545f464f554e440000000060448201526064016103b2565b610591826111a0565b600081815260056020526040812054610ed05760405162461bcd60e51b815260206004820152602e60248201527f46756e64696e674379636c65733a3a63757272656e7442616c6c6f745374617460448201527f654f663a204e4f545f464f554e4400000000000000000000000000000000000060648201526084016103b2565b60008281526005602052604081205490610ee9826111a0565b9050806060015160001415610f02575060039392505050565b6106ae8282608001518360600151611935565b6000610f2082611351565b905080610f3357610f3082611444565b90505b610fc960405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b811561100a57610fd8826111a0565b90504281610100015111158015610ff35750610ff381611488565b15610ffe5750919050565b8060600151915061101c565b60008381526005602052604090205491505b600082116110925760405162461bcd60e51b815260206004820152602360248201527f46756e64696e674379636c65733a3a5f7461707061626c653a204e4f545f464f60448201527f554e44000000000000000000000000000000000000000000000000000000000060648201526084016103b2565b61109b826111a0565b905060c9816101a00151106111185760405162461bcd60e51b815260206004820152602760248201527f46756e64696e674379636c65733a3a5f7461707061626c653a204e4f4e5f524560448201527f43555252494e470000000000000000000000000000000000000000000000000060648201526084016103b2565b60006201518082610120015161112e919061272b565b82610100015161113e91906126ff565b9050600082610120015160001461117c5762015180836101200151611163919061272b565b61116d8342612768565b61117791906127b8565b61117f565b60005b905061119785846111908442612768565b6001611a42565b95945050505050565b61123660405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8161124057919050565b81815260008281526001602090815260408083205469ffffffffffffffffffff811660c086015266ffffffffffffff605082901c168386015265ffffffffffff608882901c8116606087015260b882901c811661010087015260e891821c838701528685528484528285205473ffffffffffffffffffffffffffffffffffffffff811660e08089019190915260a082811c909316608089015261ffff60d083901c1661012089015260ff9082901c81166101608901529281901c831661018088015260f081901c9092166101a087015260f89190911c90850152848352600382528083205461014085015284835260048252808320546101c08501529382526002905291909120546101e082015290565b6000818152600560205260409020548061136d57506000919050565b6000611378826111a0565b905060008161012001511180156113b257506201518081610120015161139e919061272b565b8161010001516113ae91906126ff565b4210155b156113c05750600092915050565b606081015115806113d657508061010001514210155b156113e15750919050565b60006113f082606001516111a0565b9050600081610120015111801561142a575062015180816101200151611416919061272b565b81610100015161142691906126ff565b4210155b15611439575060009392505050565b506060015192915050565b6000818152600560205260409020548061146057506000919050565b600061146b826111a0565b905080610100015142106114825750600092915050565b50919050565b6000806114a2836000015184608001518560600151611935565b60038111156114b3576114b361282a565b1492915050565b61155060405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b826101a0015160c9141561156f5761156860006111a0565b9050610591565b6000808460a0015111611582578361158b565b61158b84611b45565b905060008380156115a157506000856101200151115b15611654576000620151808661012001518760a001516115c1919061272b565b6115cb919061272b565b8661010001516115db91906126ff565b905060008660a001511180156115f057504281105b15611637576101208301511561162d5762015180836101200151611614919061272b565b61161e8242612768565b61162891906127b8565b611630565b60005b915061164e565b6201518086610120015161164b919061272b565b91505b50611658565b5060005b600061166e86846116698542612768565b611c12565b9050600061167c8783611d48565b90506000811561168c578761168e565b845b905060405180610200016040528060008152602001826020015181526020016116b88a8887611dc5565b815282516020820152608080840151604083015260608201859052016116df8a8887611ef9565b81526020018260e0015173ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018261012001518152602001826101400151815260200182610160015181526020018261018001518152602001826101a00151815260200160008152602001826101e001518152509550505050505092915050565b60008381526005602052604081205461178e576117878461177f60006111a0565b426000611a42565b905061079b565b61179784611444565b905080156117d45760006117b66117ad836111a0565b606001516111a0565b90506117ce82826117c784886120da565b60006121a9565b5061079b565b6117dd84611351565b90508015611816576117ee8161231d565b611806576117fb816111a0565b606001519050611827565b81156118115761079b565b611827565b506000838152600560205260409020545b600080611833836111a0565b905060c9816101a00151106118b05760405162461bcd60e51b815260206004820152602b60248201527f46756e64696e674379636c65733a3a5f636f6e666967757261626c653a204e4f60448201527f4e5f524543555252494e4700000000000000000000000000000000000000000060648201526084016103b2565b8315611911576101208101516118cd57806101000151915061191e565b6000620151808261012001516118e3919061272b565b6101008301516118f39042612768565b6118fd91906127b8565b90506119098142612768565b92505061191e565b61191b81866120da565b91505b61192b8682846000611a42565b9695505050505050565b6000816119445750600061079b565b600061194f836111a0565b9050838160800151141561196757600091505061079b565b60e081015173ffffffffffffffffffffffffffffffffffffffff1615611a375760e08101516040517f4d393dc9000000000000000000000000000000000000000000000000000000008152600481018790526024810186905273ffffffffffffffffffffffffffffffffffffffff90911690634d393dc99060440160206040518083038186803b1580156119fa57600080fd5b505afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190612473565b611197565b600095945050505050565b6006805460009182611a538361277f565b90915550506006546000868152600560205260409020558351611ab25760065460009081526001602052604090207d0100000000000000000000000000000000000000d3c21bcecceda1000000605087901b4260b81b17179055611ac0565b611ac06006548585856121a9565b6000611acd6006546111a0565b905080602001516006547f3430b8834fcab595f0e68ee663700fdf7bc5e4eaf56d4eec6b0c2fb911b4afae836040015184606001518560c00151866101000151604051611b33949392919093845260208401929092526040830152606082015260800190565b60405180910390a35195945050505050565b611bdb60405180610200016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6060820151611be8575090565b611bf582606001516111a0565b90508060a0015160001415611c0957919050565b61059181611b45565b600083610120015160001415611c2957508061079b565b600062015180856101200151611c3f919061272b565b9050600081866101000151611c5491906126ff565b9050838110611c6657915061079b9050565b60a08601516000611c77828561272b565b886101000151611c8791906126ff565b8611611ca95783611c988488612768565b611ca291906127b8565b9050611d17565b61012087015115611cfb5762015180876101200151611cc8919061272b565b611cd2838661272b565b896101000151611ce291906126ff565b611cec9088612768565b611cf691906127b8565b611cfe565b60005b905062015180876101200151611d14919061272b565b93505b611d218187612768565b94505b84861115611d3d57611d3684866126ff565b9450611d24565b505050509392505050565b600060018360a00151111580611d615750610120830151155b15611d6e57506000610591565b600062015180846101200151611d84919061272b565b610100850151611d949085612768565b611d9e9190612717565b90508360a001518110611db5576000915050610591565b808460a001516106ae9190612768565b600083610120015160001415611de55760408401516117879060016126ff565b600084610100015183611df89190612768565b905060008560a00151600014611e305762015180866101200151611e1c919061272b565b8660a00151611e2b919061272b565b611e33565b60005b9050801580611e4157508181115b15611e7a5762015180866101200151611e5a919061272b565b611e649083612717565b8660400151611e7391906126ff565b9250611ef0565b62015180866101200151611e8e919061272b565b611e989082612717565b8660400151611ea791906126ff565b9250846101200151600014611ee35762015180856101200151611eca919061272b565b611ed48284612768565b611ede9190612717565b611ee6565b60005b61192b90846126ff565b50509392505050565b600083610120015160001415611f2c576117878460c00151856101a001516103e8611f249190612768565b6103e8612334565b600084610100015183611f3f9190612768565b905060008560a0015160001480611f5857506060860151155b611f845762015180866101200151611f70919061272b565b8660a00151611f7f919061272b565b611f87565b60005b60c087015193509050801580611f9c57508181115b15612011576101a0860151611fb257505061079b565b600062015180876101200151611fc8919061272b565b611fd29084612717565b905060005b8181101561200a57611ff685896101a001516103e8611f249190612768565b9450806120028161277f565b915050611fd7565b5050611ef0565b6101a0860151156120585760005b8660a001518110156120565761204284886101a001516103e8611f249190612768565b93508061204e8161277f565b91505061201f565b505b6101a085015115611ef057600085610120015160001461209f5762015180866101200151612086919061272b565b6120908385612768565b61209a9190612717565b6120a2565b60005b905060005b81811015611d3d576120c685886101a001516103e8611f249190612768565b9450806120d28161277f565b9150506120a7565b60e0820151600090819073ffffffffffffffffffffffffffffffffffffffff16612105576000612191565b8360e0015173ffffffffffffffffffffffffffffffffffffffff16630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b15801561214f57600080fd5b505afa158015612163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218791906124ad565b61219190846126ff565b90508042116121a057806106ae565b50429392505050565b6000808460a00151116121bc57836121c5565b6121c584611b45565b905060006121d4858386611c12565b905060006121e3868484611ef9565b905060006121f2878585611dc5565b905084156122dc5760006122068885611d48565b9050600081156122165788612218565b855b90506122a58a8260800151848460e00151856101200151866101600151876101800151886101a0015160009788526020889052604090972060f89590951b60f09790971b60e89190911b60e09290921b60d09390931b60a09690961b73ffffffffffffffffffffffffffffffffffffffff9094169390931794909417179290921791909117919091179055565b8051600090815260026020908152604080832054600680548552828520919091559351835260039091528082205492548252902055505b602080880151885160008b81526001909352604090922060509190911b841760889290921b9190911760b885901b1760e883901b1790555050505050505050565b600080612329836111a0565b905061079b81611488565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561238d57838281612383576123836127fb565b049250505061079b565b8381106123d0576040517f773cc18c00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016103b2565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006020828403121561244b57600080fd5b813561079b81612859565b60006020828403121561246857600080fd5b815161079b81612859565b60006020828403121561248557600080fd5b81516004811061079b57600080fd5b6000602082840312156124a657600080fd5b5035919050565b6000602082840312156124bf57600080fd5b5051919050565b60008060008060008587036101408112156124e057600080fd5b8635955060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561251457600080fd5b5060208601935060e086013592506101008601359150610120860135801515811461253e57600080fd5b809150509295509295909350565b6000806040838503121561255f57600080fd5b50508035926020909101359150565b60208101600483106125a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600061020082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161261f60e084018273ffffffffffffffffffffffffffffffffffffffff169052565b50610100838101519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e092830151929091019190915290565b60006101208201905085825284356020830152602085013560408301526040850135606083015260608501356080830152608085013560a083015260a08501356126c881612859565b73ffffffffffffffffffffffffffffffffffffffff80821660c08501528560e0850152808516610100850152505095945050505050565b60008219821115612712576127126127cc565b500190565b600082612726576127266127fb565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612763576127636127cc565b500290565b60008282101561277a5761277a6127cc565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127b1576127b16127cc565b5060010190565b6000826127c7576127c76127fb565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461287b57600080fd5b5056fea2646970667358221220df18606a101665fcf0ec539f627685335c7f38a56866537f65c99b7f2562e31264736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "configure(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256,bool)": {
        "details": "Only a project's current terminal can configure its funding cycles._properties.target The amount that the project wants to receive in each funding cycle. 18 decimals._properties.currency The currency of the `_target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days.  Set to 0 for no expiry and to be able to reconfigure anytime._cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This does nothing for a project's first funding cycle._properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 100, a contribution to the next funding cycle will only give you 90% of tickets given to a contribution of the same amount during the current funding cycle. If the number is 200, a contribution to the next funding cycle will only give you 80% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 201, an non-recurring funding cycle will get made._ballot The new ballot that will be used to approve subsequent reconfigurations.",
        "params": {
          "_configureActiveFundingCycle": "If a funding cycle that has already started should be configurable.",
          "_fee": "The fee that this configuration will incure when tapping.",
          "_metadata": "Data to associate with this funding cycle configuration.",
          "_projectId": "The ID of the project being reconfigured.",
          "_properties": "The funding cycle configuration."
        },
        "returns": {
          "fundingCycle": "The funding cycle that the configuration will take effect during."
        }
      },
      "constructor": {
        "params": {
          "_terminalDirectory": "A directory of a project's current Candybox terminal to receive payments in."
        }
      },
      "currentBallotStateOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to check for a pending reconfiguration."
        },
        "returns": {
          "_0": "The current ballot's state."
        }
      },
      "currentOf(uint256)": {
        "details": " This runs very similar logic to `_tappable`.",
        "params": {
          "_projectId": "The ID of the project being looked through."
        },
        "returns": {
          "fundingCycle": "The current funding cycle."
        }
      },
      "get(uint256)": {
        "params": {
          "_fundingCycleId": "The ID of the funding cycle to get."
        },
        "returns": {
          "_0": "_fundingCycle The funding cycle."
        }
      },
      "queuedOf(uint256)": {
        "details": " This runs roughly similar logic to `_configurable`.",
        "params": {
          "_projectId": "The ID of the project being looked through."
        },
        "returns": {
          "_0": "_fundingCycle The queued funding cycle."
        }
      },
      "tap(uint256,uint256)": {
        "details": "Only a project's current terminal can tap funds for its funding cycles.",
        "params": {
          "_amount": "The amount being tapped.",
          "_projectId": "The ID of the project being tapped."
        },
        "returns": {
          "fundingCycle": "The tapped funding cycle."
        }
      }
    },
    "stateVariables": {
      "count": {
        "details": "Funding cycles have IDs > 0."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "BASE_WEIGHT()": {
        "notice": "The weight used for each project's first funding cycle."
      },
      "MAX_CYCLE_LIMIT()": {
        "notice": "The maximum value that a cycle limit can be set to."
      },
      "configure(uint256,(uint256,uint256,uint256,uint256,uint256,address),uint256,uint256,bool)": {
        "notice": " Configures the next eligible funding cycle for the specified project."
      },
      "count()": {
        "notice": "The total number of funding cycles created, which is used for issuing funding cycle IDs."
      },
      "currentBallotStateOf(uint256)": {
        "notice": " The currency ballot state of the project."
      },
      "currentOf(uint256)": {
        "notice": " The funding cycle that is currently active for the specified project."
      },
      "get(uint256)": {
        "notice": " Get the funding cycle with the given ID."
      },
      "latestIdOf(uint256)": {
        "notice": "The ID of the latest funding cycle for each project."
      },
      "queuedOf(uint256)": {
        "notice": " The funding cycle that's next up for a project, and therefor not currently accepting payments."
      },
      "tap(uint256,uint256)": {
        "notice": " Tap funds from a project's currently tappable funding cycle."
      },
      "terminalDirectory()": {
        "notice": "The direct deposit terminals."
      }
    },
    "notice": "Manage funding cycle configurations, accounting, and scheduling.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4565,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_packedConfigurationPropertiesOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4569,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_packedIntrinsicPropertiesOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4573,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_metadataOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4577,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_targetOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4581,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_tappedOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4597,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "latestIdOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4602,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "count",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}